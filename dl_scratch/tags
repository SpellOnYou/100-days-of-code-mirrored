!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_CBS	modules/exp/nb_09b.py	/^    ALL_CBS = {'begin_batch', 'after_pred', 'after_loss', 'after_backward', 'after_step',$/;"	v	class:Learner
AWD_LSTM	modules/exp/nb_12a.py	/^class AWD_LSTM(nn.Module):$/;"	c
AdaptiveConcatPool2d	modules/exp/nb_11a.py	/^class AdaptiveConcatPool2d(nn.Module):$/;"	c
AudioList	modules/cnn-lstm.py	/^class AudioList(ItemList):$/;"	c
AudioList	modules/hapkim-custom.py	/^class AudioList(ItemList):$/;"	c
AudioList	modules/ser-code-convert-submissionverison .py	/^class AudioList(ItemList):$/;"	c
AudioList	modules/ser-code-interpret.py	/^class AudioList(ItemList):$/;"	c
AverageGrad	modules/exp/nb_09.py	/^class AverageGrad(Stat):$/;"	c
AverageSqrGrad	modules/exp/nb_09.py	/^class AverageSqrGrad(Stat):$/;"	c
AvgStats	modules/exp/nb_04.py	/^class AvgStats():$/;"	c
AvgStatsCallback	modules/exp/nb_05b.py	/^class AvgStatsCallback(Callback):$/;"	c
AvgStatsCallback	modules/exp/nb_09b.py	/^class AvgStatsCallback(Callback):$/;"	c
AvgStatsCallback	modules/exp/nb_09c.py	/^class AvgStatsCallback(Callback):$/;"	c
BatchTransformXCallback	modules/exp/nb_06.py	/^class BatchTransformXCallback(Callback):$/;"	c
Beta	modules/exp/nb_10b.py	/^from torch.distributions.beta import Beta$/;"	i
Callback	modules/exp/nb_04.py	/^class Callback():$/;"	c
Callback	modules/exp/nb_05b.py	/^class Callback():$/;"	c
CancelBatchException	modules/exp/nb_05b.py	/^class CancelBatchException(Exception): pass$/;"	c
CancelEpochException	modules/exp/nb_05b.py	/^class CancelEpochException(Exception): pass$/;"	c
CancelTrainException	modules/exp/nb_05b.py	/^class CancelTrainException(Exception): pass$/;"	c
CategoryProcessor	modules/exp/nb_08.py	/^class CategoryProcessor(Processor):$/;"	c
CenterCrop	modules/exp/nb_10.py	/^class CenterCrop(GeneralCrop):$/;"	c
CudaCallback	modules/exp/nb_06.py	/^class CudaCallback(Callback):$/;"	c
DataBunch	modules/exp/nb_04.py	/^class DataBunch():$/;"	c
DataBunch	modules/exp/nb_08.py	/^class DataBunch():$/;"	c
DataLoader	modules/exp/nb_03.py	/^from torch.utils.data import DataLoader, SequentialSampler, RandomSampler$/;"	i
Dataset	modules/exp/nb_03.py	/^class Dataset():$/;"	c
DebugCallback	modules/exp/nb_11a.py	/^class DebugCallback(Callback):$/;"	c
DummyChannel	modules/cnn-lstm.py	/^class DummyChannel():$/;"	c
DummyChannel	modules/hapkim-custom.py	/^class DummyChannel():$/;"	c
DummyChannel	modules/ser-code-convert-submissionverison .py	/^class DummyChannel():$/;"	c
DummyChannel	modules/ser-code-interpret.py	/^class DummyChannel():$/;"	c
EmbeddingDropout	modules/exp/nb_12a.py	/^class EmbeddingDropout(nn.Module):$/;"	c
ExecutePreprocessor	modules/run_notebook.py	/^from nbconvert.preprocessors import ExecutePreprocessor$/;"	i
F	modules/exp/nb_03.py	/^import torch.nn.functional as F$/;"	i
Flatten	modules/exp/nb_11.py	/^class Flatten(nn.Module):$/;"	c
FloatTensor	modules/exp/nb_10.py	/^from torch import FloatTensor,LongTensor$/;"	i
GeneralCrop	modules/exp/nb_10.py	/^class GeneralCrop(PilTransform):$/;"	c
GeneralRelu	modules/exp/nb_06.py	/^class GeneralRelu(nn.Module):$/;"	c
GradientClipping	modules/exp/nb_12a.py	/^class GradientClipping(Callback):$/;"	c
Hook	modules/exp/nb_06.py	/^class Hook():$/;"	c
Hooks	modules/exp/nb_06.py	/^class Hooks(ListContainer):$/;"	c
ImageList	modules/exp/nb_08.py	/^class ImageList(ItemList):$/;"	c
ItemList	modules/exp/nb_08.py	/^class ItemList(ListContainer):$/;"	c
Javascript	modules/exp/nb_06.py	/^from IPython.display import display, Javascript$/;"	i
LM_PreLoader	modules/exp/nb_12.py	/^class LM_PreLoader():$/;"	c
LR_Find	modules/exp/nb_05b.py	/^class LR_Find(Callback):$/;"	c
LR_Find	modules/exp/nb_09.py	/^class LR_Find(Callback):$/;"	c
LR_Find	modules/hapkim-custom.py	/^class LR_Find(Callback):$/;"	c
LabelSmoothingCrossEntropy	modules/exp/nb_10b.py	/^class LabelSmoothingCrossEntropy(nn.Module):$/;"	c
LabeledData	modules/exp/nb_08.py	/^class LabeledData():$/;"	c
Lambda	modules/exp/nb_06.py	/^class Lambda(nn.Module):$/;"	c
Learner	modules/exp/nb_04.py	/^class Learner():$/;"	c
Learner	modules/exp/nb_09b.py	/^class Learner():$/;"	c
LinearDecoder	modules/exp/nb_12a.py	/^class LinearDecoder(nn.Module):$/;"	c
ListContainer	modules/exp/nb_06.py	/^class ListContainer():$/;"	c
LongTensor	modules/exp/nb_10.py	/^from torch import FloatTensor,LongTensor$/;"	i
MNIST_URL	modules/exp/nb_01.py	/^MNIST_URL='http:\/\/deeplearning.net\/data\/mnist\/mnist.pkl'$/;"	v
MakeRGB	modules/exp/nb_08.py	/^class MakeRGB(Transform):$/;"	c
MergeLayer	modules/transformer.py	/^class MergeLayer(nn.Module):$/;"	c
MixUp	modules/exp/nb_10b.py	/^class MixUp(Callback):$/;"	c
MixedPrecision	modules/exp/nb_10c.py	/^class MixedPrecision(Callback):$/;"	c
MultiHeadAttention	modules/transformer.py	/^class MultiHeadAttention(nn.Module):$/;"	c
NoneReduce	modules/exp/nb_10b.py	/^class NoneReduce():$/;"	c
NumericalizeProcessor	modules/exp/nb_12.py	/^class NumericalizeProcessor(Processor):$/;"	c
ORTH	modules/exp/nb_12.py	/^from spacy.symbols import ORTH$/;"	i
Optimizer	modules/exp/nb_09.py	/^class Optimizer():$/;"	c
OrderedDict	modules/exp/nb_08.py	/^from collections import OrderedDict$/;"	i
PIL	modules/exp/nb_08.py	/^import PIL,os,mimetypes$/;"	i
PadorTrim	modules/hapkim-custom.py	/^class PadorTrim():$/;"	c
PadorTrim	modules/ser-code-convert-submissionverison .py	/^class PadorTrim():$/;"	c
PadorTrim	modules/ser-code-interpret.py	/^class PadorTrim():$/;"	c
ParamScheduler	modules/exp/nb_05.py	/^class ParamScheduler(Callback):$/;"	c
ParamScheduler	modules/exp/nb_05b.py	/^class ParamScheduler(Callback):$/;"	c
ParamScheduler	modules/exp/nb_09.py	/^class ParamScheduler(Callback):$/;"	c
Path	modules/exp/nb_01.py	/^from pathlib import Path$/;"	i
Path	modules/exp/notebook2script.py	/^from pathlib import Path$/;"	i
Path	modules/hapkim-custom.py	/^from pathlib import Path$/;"	i
PilRandomDihedral	modules/exp/nb_10.py	/^class PilRandomDihedral(PilTransform):$/;"	c
PilRandomFlip	modules/exp/nb_10.py	/^class PilRandomFlip(PilTransform):$/;"	c
PilTiltRandomCrop	modules/exp/nb_10.py	/^class PilTiltRandomCrop(PilTransform):$/;"	c
PilTransform	modules/exp/nb_10.py	/^class PilTransform(Transform): _order=11$/;"	c
ProcessPoolExecutor	modules/exp/nb_12.py	/^from concurrent.futures import ProcessPoolExecutor$/;"	i
Processor	modules/exp/nb_08.py	/^class Processor():$/;"	c
ProgressCallback	modules/exp/nb_09c.py	/^class ProgressCallback(Callback):$/;"	c
RNNDropout	modules/exp/nb_12a.py	/^class RNNDropout(nn.Module):$/;"	c
RNNTrainer	modules/exp/nb_12a.py	/^class RNNTrainer(Callback):$/;"	c
RNNTrainer	modules/hapkim-custom.py	/^class RNNTrainer(Callback):$/;"	c
RandomResizedCrop	modules/exp/nb_10.py	/^class RandomResizedCrop(GeneralCrop):$/;"	c
RandomSampler	modules/exp/nb_03.py	/^from torch.utils.data import DataLoader, SequentialSampler, RandomSampler$/;"	i
Recorder	modules/exp/nb_05.py	/^class Recorder(Callback):$/;"	c
Recorder	modules/exp/nb_05b.py	/^class Recorder(Callback):$/;"	c
Recorder	modules/exp/nb_09.py	/^class Recorder(Callback):$/;"	c
Recorder	modules/hapkim-custom.py	/^class Recorder(Callback):$/;"	c
ResBlock	modules/exp/nb_11.py	/^class ResBlock(nn.Module):$/;"	c
Reshape	modules/cnn-lstm.py	/^class Reshape():$/;"	c
Reshape	modules/hapkim-custom.py	/^class Reshape():$/;"	c
Reshape	modules/ser-code-convert-submissionverison .py	/^class Reshape():$/;"	c
Reshape	modules/ser-code-interpret.py	/^class Reshape():$/;"	c
ResizeFixed	modules/exp/nb_08.py	/^class ResizeFixed(Transform):$/;"	c
Runner	modules/exp/nb_04.py	/^class Runner():$/;"	c
Runner	modules/exp/nb_05b.py	/^class Runner():$/;"	c
RunningBatchNorm	modules/exp/nb_07.py	/^class RunningBatchNorm(nn.Module):$/;"	c
Sampler	modules/exp/nb_12.py	/^from torch.utils.data import Sampler$/;"	i
SequentialEx	modules/transformer.py	/^class SequentialEx(nn.Module):$/;"	c
SequentialRNN	modules/exp/nb_12a.py	/^class SequentialRNN(nn.Sequential):$/;"	c
SequentialSampler	modules/exp/nb_03.py	/^from torch.utils.data import DataLoader, SequentialSampler, RandomSampler$/;"	i
SimpleNamespace	modules/exp/nb_11a.py	/^from types import SimpleNamespace$/;"	i
SortSampler	modules/exp/nb_12.py	/^class SortSampler(Sampler):$/;"	c
SortishSampler	modules/exp/nb_12.py	/^class SortishSampler(Sampler):$/;"	c
SpecAugment	modules/hapkim-custom.py	/^class SpecAugment():$/;"	c
SpecAugment	modules/ser-code-convert-submissionverison .py	/^class SpecAugment():$/;"	c
SpecAugment	modules/ser-code-interpret.py	/^class SpecAugment():$/;"	c
SplitData	modules/exp/nb_08.py	/^class SplitData():$/;"	c
Stat	modules/exp/nb_09.py	/^class Stat():$/;"	c
StatefulOptimizer	modules/exp/nb_09.py	/^class StatefulOptimizer(Optimizer):$/;"	c
StepCount	modules/exp/nb_09.py	/^class StepCount(Stat):$/;"	c
TEST	modules/exp/nb_00.py	/^TEST = 'test'/;"	v
TextList	modules/exp/nb_12.py	/^class TextList(ItemList):$/;"	c
TokenizeProcessor	modules/exp/nb_12.py	/^class TokenizeProcessor(Processor):$/;"	c
TrainEvalCallback	modules/exp/nb_04.py	/^class TrainEvalCallback(Callback):$/;"	c
TrainEvalCallback	modules/exp/nb_05b.py	/^class TrainEvalCallback(Callback):$/;"	c
Transform	modules/exp/nb_08.py	/^class Transform(): _order=0$/;"	c
WEIGHT_HH	modules/exp/nb_12a.py	/^WEIGHT_HH = 'weight_hh_l0'$/;"	v
WeightDropout	modules/exp/nb_12a.py	/^class WeightDropout(nn.Module):$/;"	c
XResNet	modules/exp/nb_11.py	/^class XResNet(nn.Sequential):$/;"	c
__call__	modules/cnn-lstm.py	/^    def __call__(self, item):$/;"	m	class:DummyChannel	file:
__call__	modules/cnn-lstm.py	/^    def __call__(self, item):$/;"	m	class:Reshape	file:
__call__	modules/exp/nb_04.py	/^    def __call__(self, cb_name):$/;"	m	class:Runner	file:
__call__	modules/exp/nb_05b.py	/^    def __call__(self, cb_name):$/;"	m	class:Callback	file:
__call__	modules/exp/nb_05b.py	/^    def __call__(self, cb_name):$/;"	m	class:Runner	file:
__call__	modules/exp/nb_08.py	/^    def __call__(self, item): return item.convert('RGB')$/;"	m	class:MakeRGB	file:
__call__	modules/exp/nb_08.py	/^    def __call__(self, item): return item.resize(self.size, PIL.Image.BILINEAR)$/;"	m	class:ResizeFixed	file:
__call__	modules/exp/nb_08.py	/^    def __call__(self, items):$/;"	m	class:CategoryProcessor	file:
__call__	modules/exp/nb_09b.py	/^    def __call__(self, cb_name):$/;"	m	class:Learner	file:
__call__	modules/exp/nb_10.py	/^    def __call__(self, x):$/;"	m	class:GeneralCrop	file:
__call__	modules/exp/nb_10.py	/^    def __call__(self, x):$/;"	m	class:PilRandomDihedral	file:
__call__	modules/exp/nb_10.py	/^    def __call__(self, x):$/;"	m	class:PilRandomFlip	file:
__call__	modules/exp/nb_10.py	/^    def __call__(self, x):$/;"	m	class:PilTiltRandomCrop	file:
__call__	modules/exp/nb_11a.py	/^    def __call__(self, cb_name):$/;"	m	class:DebugCallback	file:
__call__	modules/exp/nb_12.py	/^    def __call__(self, items):$/;"	m	class:NumericalizeProcessor	file:
__call__	modules/exp/nb_12.py	/^    def __call__(self, items):$/;"	m	class:TokenizeProcessor	file:
__call__	modules/hapkim-custom.py	/^    def __call__(self, ad):$/;"	m	class:PadorTrim	file:
__call__	modules/hapkim-custom.py	/^    def __call__(self, item):$/;"	m	class:DummyChannel	file:
__call__	modules/hapkim-custom.py	/^    def __call__(self, item):$/;"	m	class:Reshape	file:
__call__	modules/hapkim-custom.py	/^    def __call__(self, spec):$/;"	m	class:SpecAugment	file:
__call__	modules/ser-code-convert-submissionverison .py	/^    def __call__(self, ad):$/;"	m	class:PadorTrim	file:
__call__	modules/ser-code-convert-submissionverison .py	/^    def __call__(self, item):$/;"	m	class:DummyChannel	file:
__call__	modules/ser-code-convert-submissionverison .py	/^    def __call__(self, item):$/;"	m	class:Reshape	file:
__call__	modules/ser-code-convert-submissionverison .py	/^    def __call__(self, spec):$/;"	m	class:SpecAugment	file:
__call__	modules/ser-code-interpret.py	/^    def __call__(self, ad):$/;"	m	class:PadorTrim	file:
__call__	modules/ser-code-interpret.py	/^    def __call__(self, item):$/;"	m	class:DummyChannel	file:
__call__	modules/ser-code-interpret.py	/^    def __call__(self, item):$/;"	m	class:Reshape	file:
__call__	modules/ser-code-interpret.py	/^    def __call__(self, spec):$/;"	m	class:SpecAugment	file:
__del__	modules/exp/nb_06.py	/^    def __del__(self): self.remove()$/;"	m	class:Hook	file:
__del__	modules/exp/nb_06.py	/^    def __del__(self): self.remove()$/;"	m	class:Hooks	file:
__delitem__	modules/exp/nb_06.py	/^    def __delitem__(self, i): del(self.items[i])$/;"	m	class:ListContainer	file:
__delitem__	modules/exp/nb_06.py	/^    def __delitem__(self, i):$/;"	m	class:Hooks	file:
__enter__	modules/exp/nb_06.py	/^    def __enter__(self, *args): return self$/;"	m	class:Hooks	file:
__enter__	modules/exp/nb_10b.py	/^    def __enter__(self):$/;"	m	class:NoneReduce	file:
__eq__	modules/exp/nb_bleu.py	/^def __eq__(self, other):$/;"	f	file:
__eq__	modules/exp/nb_translation.py	/^    def __eq__(self, other):$/;"	f	file:
__exit__	modules/exp/nb_06.py	/^    def __exit__ (self, *args): self.remove()$/;"	m	class:Hooks	file:
__exit__	modules/exp/nb_10b.py	/^    def __exit__(self, type, value, traceback):$/;"	m	class:NoneReduce	file:
__getattr__	modules/exp/nb_04.py	/^    def __getattr__(self, k): return getattr(self.run, k)$/;"	m	class:Callback	file:
__getattr__	modules/exp/nb_05b.py	/^    def __getattr__(self, k): return getattr(self.run, k)$/;"	m	class:Callback	file:
__getattr__	modules/exp/nb_08.py	/^    def __getattr__(self,k): return getattr(self.train,k)$/;"	m	class:SplitData	file:
__getitem__	modules/exp/nb_03.py	/^    def __getitem__(self, i): return self.x[i],self.y[i]$/;"	m	class:Dataset	file:
__getitem__	modules/exp/nb_06.py	/^    def __getitem__(self, idx):$/;"	m	class:ListContainer	file:
__getitem__	modules/exp/nb_08.py	/^    def __getitem__(self, idx):$/;"	m	class:ItemList	file:
__getitem__	modules/exp/nb_08.py	/^    def __getitem__(self,idx): return self.x[idx],self.y[idx]$/;"	m	class:LabeledData	file:
__getitem__	modules/exp/nb_12.py	/^    def __getitem__(self, idx):$/;"	m	class:LM_PreLoader	file:
__getitem__	modules/transformer.py	/^    def __getitem__(self,i): return self.layers[i]$/;"	m	class:SequentialEx	file:
__hash__	modules/exp/nb_bleu.py	/^def __hash__(self): return int(sum([o * self.max_n**i for i,o in enumerate(self.ngram)]))$/;"	f	file:
__hash__	modules/exp/nb_translation.py	/^    def __hash__(self): return int(sum([o * self.max_n**i for i,o in enumerate(self.ngram)]))$/;"	f	file:
__init__	modules/exp/nb_03.py	/^    def __init__(self, x, y): self.x,self.y = x,y$/;"	m	class:Dataset
__init__	modules/exp/nb_04.py	/^    def __init__(self, cbs=None, cb_funcs=None):$/;"	m	class:Runner
__init__	modules/exp/nb_04.py	/^    def __init__(self, metrics, in_train): self.metrics,self.in_train = listify(metrics),in_train$/;"	m	class:AvgStats
__init__	modules/exp/nb_04.py	/^    def __init__(self, model, opt, loss_func, data):$/;"	m	class:Learner
__init__	modules/exp/nb_04.py	/^    def __init__(self, train_dl, valid_dl, c=None):$/;"	m	class:DataBunch
__init__	modules/exp/nb_05.py	/^    def __init__(self, pname, sched_funcs): self.pname,self.sched_funcs = pname,sched_funcs$/;"	m	class:ParamScheduler
__init__	modules/exp/nb_05b.py	/^    def __init__(self, cbs=None, cb_funcs=None):$/;"	m	class:Runner
__init__	modules/exp/nb_05b.py	/^    def __init__(self, max_iter=100, min_lr=1e-6, max_lr=10):$/;"	m	class:LR_Find
__init__	modules/exp/nb_05b.py	/^    def __init__(self, metrics):$/;"	m	class:AvgStatsCallback
__init__	modules/exp/nb_05b.py	/^    def __init__(self, pname, sched_funcs): self.pname,self.sched_funcs = pname,sched_funcs$/;"	m	class:ParamScheduler
__init__	modules/exp/nb_06.py	/^    def __init__(self, func):$/;"	m	class:Lambda
__init__	modules/exp/nb_06.py	/^    def __init__(self, items): self.items = listify(items)$/;"	m	class:ListContainer
__init__	modules/exp/nb_06.py	/^    def __init__(self, leak=None, sub=None, maxv=None):$/;"	m	class:GeneralRelu
__init__	modules/exp/nb_06.py	/^    def __init__(self, m, f): self.hook = m.register_forward_hook(partial(f, self))$/;"	m	class:Hook
__init__	modules/exp/nb_06.py	/^    def __init__(self, ms, f): super().__init__([Hook(m, f) for m in ms])$/;"	m	class:Hooks
__init__	modules/exp/nb_06.py	/^    def __init__(self, tfm): self.tfm = tfm$/;"	m	class:BatchTransformXCallback
__init__	modules/exp/nb_07.py	/^    def __init__(self, nf, mom=0.1, eps=1e-5):$/;"	m	class:RunningBatchNorm
__init__	modules/exp/nb_08.py	/^    def __init__(self): self.vocab=None$/;"	m	class:CategoryProcessor
__init__	modules/exp/nb_08.py	/^    def __init__(self, items, path='.', tfms=None):$/;"	m	class:ItemList
__init__	modules/exp/nb_08.py	/^    def __init__(self, train, valid): self.train,self.valid = train,valid$/;"	m	class:SplitData
__init__	modules/exp/nb_08.py	/^    def __init__(self, train_dl, valid_dl, c_in=None, c_out=None):$/;"	m	class:DataBunch
__init__	modules/exp/nb_08.py	/^    def __init__(self, x, y, proc_x=None, proc_y=None):$/;"	m	class:LabeledData
__init__	modules/exp/nb_08.py	/^    def __init__(self,size):$/;"	m	class:ResizeFixed
__init__	modules/exp/nb_09.py	/^    def __init__(self, dampening:bool=False): self.dampening=dampening$/;"	m	class:AverageGrad
__init__	modules/exp/nb_09.py	/^    def __init__(self, dampening:bool=True): self.dampening=dampening$/;"	m	class:AverageSqrGrad
__init__	modules/exp/nb_09.py	/^    def __init__(self, max_iter=100, min_lr=1e-6, max_lr=10):$/;"	m	class:LR_Find
__init__	modules/exp/nb_09.py	/^    def __init__(self, params, steppers, **defaults):$/;"	m	class:Optimizer
__init__	modules/exp/nb_09.py	/^    def __init__(self, params, steppers, stats=None, **defaults):$/;"	m	class:StatefulOptimizer
__init__	modules/exp/nb_09.py	/^    def __init__(self, pname, sched_funcs):$/;"	m	class:ParamScheduler
__init__	modules/exp/nb_09b.py	/^    def __init__(self, metrics):$/;"	m	class:AvgStatsCallback
__init__	modules/exp/nb_09b.py	/^    def __init__(self, model, data, loss_func, opt_func=sgd_opt, lr=1e-2, splitter=param_getter,$/;"	m	class:Learner
__init__	modules/exp/nb_09c.py	/^    def __init__(self, metrics):$/;"	m	class:AvgStatsCallback
__init__	modules/exp/nb_10.py	/^    def __init__(self, p=0.5): self.p=p$/;"	m	class:PilRandomFlip
__init__	modules/exp/nb_10.py	/^    def __init__(self, p=0.75): self.p=p*7\/8 #Little hack to get the 1\/8 identity dihedral transform taken into account.$/;"	m	class:PilRandomDihedral
__init__	modules/exp/nb_10.py	/^    def __init__(self, size, crop_size=None, magnitude=0., resample=PIL.Image.BILINEAR):$/;"	m	class:PilTiltRandomCrop
__init__	modules/exp/nb_10.py	/^    def __init__(self, size, crop_size=None, resample=PIL.Image.BILINEAR):$/;"	m	class:GeneralCrop
__init__	modules/exp/nb_10.py	/^    def __init__(self, size, scale=(0.08,1.0), ratio=(3.\/4., 4.\/3.), resample=PIL.Image.BILINEAR):$/;"	m	class:RandomResizedCrop
__init__	modules/exp/nb_10.py	/^    def __init__(self, size, scale=1.14, resample=PIL.Image.BILINEAR):$/;"	m	class:CenterCrop
__init__	modules/exp/nb_10b.py	/^    def __init__(self, loss_func):$/;"	m	class:NoneReduce
__init__	modules/exp/nb_10b.py	/^    def __init__(self, α:float=0.4): self.distrib = Beta(tensor([α]), tensor([α]))$/;"	m	class:MixUp
__init__	modules/exp/nb_10b.py	/^    def __init__(self, ε:float=0.1, reduction='mean'):$/;"	m	class:LabelSmoothingCrossEntropy
__init__	modules/exp/nb_10c.py	/^    def __init__(self, loss_scale=512, flat_master=False, dynamic=True, max_loss_scale=2.**24, div_factor=2.,$/;"	m	class:MixedPrecision
__init__	modules/exp/nb_11.py	/^    def __init__(self, expansion, ni, nh, stride=1):$/;"	m	class:ResBlock
__init__	modules/exp/nb_11a.py	/^    def __init__(self, cb_name, f=None): self.cb_name,self.f = cb_name,f$/;"	m	class:DebugCallback
__init__	modules/exp/nb_11a.py	/^    def __init__(self, sz=1):$/;"	m	class:AdaptiveConcatPool2d
__init__	modules/exp/nb_12.py	/^    def __init__(self, data, bs=64, bptt=70, shuffle=False):$/;"	m	class:LM_PreLoader
__init__	modules/exp/nb_12.py	/^    def __init__(self, data_source, key): self.data_source,self.key = data_source,key$/;"	m	class:SortSampler
__init__	modules/exp/nb_12.py	/^    def __init__(self, data_source, key, bs):$/;"	m	class:SortishSampler
__init__	modules/exp/nb_12.py	/^    def __init__(self, lang="en", chunksize=2000, pre_rules=None, post_rules=None, max_workers=4):$/;"	m	class:TokenizeProcessor
__init__	modules/exp/nb_12.py	/^    def __init__(self, vocab=None, max_vocab=60000, min_freq=2):$/;"	m	class:NumericalizeProcessor
__init__	modules/exp/nb_12a.py	/^    def __init__(self, clip=None): self.clip = clip$/;"	m	class:GradientClipping
__init__	modules/exp/nb_12a.py	/^    def __init__(self, emb, embed_p):$/;"	m	class:EmbeddingDropout
__init__	modules/exp/nb_12a.py	/^    def __init__(self, module, weight_p=[0.], layer_names=[WEIGHT_HH]):$/;"	m	class:WeightDropout
__init__	modules/exp/nb_12a.py	/^    def __init__(self, n_out, n_hid, output_p, tie_encoder=None, bias=True):$/;"	m	class:LinearDecoder
__init__	modules/exp/nb_12a.py	/^    def __init__(self, p=0.5):$/;"	m	class:RNNDropout
__init__	modules/exp/nb_12a.py	/^    def __init__(self, vocab_sz, emb_sz, n_hid, n_layers, pad_token,$/;"	m	class:AWD_LSTM
__init__	modules/exp/nb_12a.py	/^    def __init__(self, α, β): self.α,self.β = α,β$/;"	m	class:RNNTrainer
__init__	modules/exp/nb_bleu.py	/^def __init__(self, ngram, max_n=5000): self.ngram,self.max_n = ngram,max_n$/;"	f
__init__	modules/exp/nb_bleu.py	/^def __init__(self, vocab_sz):$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, d:int):$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, inp_vsz:int, out_vsz:int, n_layers:int=6, n_heads:int=8, d_model:int=256, d_head:int=32,$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, n_heads:int, d_model:int, d_head:int, d_inner:int, resid_p:float=0., attn_p:float=0., ff_p:float=0.,$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, n_heads:int, d_model:int, d_head:int=None, resid_p:float=0., attn_p:float=0., bias:bool=True,$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, ngram, max_n=5000): self.ngram,self.max_n = ngram,max_n$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, vocab_sz):$/;"	f
__init__	modules/exp/nb_translation.py	/^    def __init__(self, vocab_sz:int, emb_sz:int, inp_p:float=0.):$/;"	f
__init__	modules/hapkim-custom.py	/^    def __init__(self, max_iter=100, min_lr=1e-6, max_lr=10):$/;"	m	class:LR_Find
__init__	modules/hapkim-custom.py	/^    def __init__(self, max_len):$/;"	m	class:PadorTrim
__init__	modules/hapkim-custom.py	/^    def __init__(self, max_mask_pct=0.2, freq_masks=1, time_masks=1, replace_with_zero=False):$/;"	m	class:SpecAugment
__init__	modules/hapkim-custom.py	/^    def __init__(self, α, β): self.α,self.β = α,β$/;"	m	class:RNNTrainer
__init__	modules/ser-code-convert-submissionverison .py	/^    def __init__(self, max_len):$/;"	m	class:PadorTrim
__init__	modules/ser-code-convert-submissionverison .py	/^    def __init__(self, max_mask_pct=0.2, freq_masks=1, time_masks=1, replace_with_zero=False):$/;"	m	class:SpecAugment
__init__	modules/ser-code-interpret.py	/^    def __init__(self, max_len):$/;"	m	class:PadorTrim
__init__	modules/ser-code-interpret.py	/^    def __init__(self, max_mask_pct=0.2, freq_masks=1, time_masks=1, replace_with_zero=False):$/;"	m	class:SpecAugment
__init__	modules/transformer.py	/^    def __init__(self, *layers): self.layers = nn.ModuleList(layers)$/;"	m	class:SequentialEx
__init__	modules/transformer.py	/^    def __init__(self, dense:bool=False): self.dense=dense$/;"	m	class:MergeLayer
__init__	modules/transformer.py	/^    def __init__(self, n_heads:int, d_model:int, d_head:int=None, resid_p:float=0., attn_p:float=0., bias:bool=True,$/;"	m	class:MultiHeadAttention
__iter__	modules/exp/nb_06.py	/^    def __iter__(self): return iter(self.items)$/;"	m	class:ListContainer	file:
__iter__	modules/exp/nb_12.py	/^    def __iter__(self):$/;"	m	class:SortSampler	file:
__iter__	modules/exp/nb_12.py	/^    def __iter__(self):$/;"	m	class:SortishSampler	file:
__len__	modules/exp/nb_03.py	/^    def __len__(self): return len(self.x)$/;"	m	class:Dataset	file:
__len__	modules/exp/nb_06.py	/^    def __len__(self): return len(self.items)$/;"	m	class:ListContainer	file:
__len__	modules/exp/nb_08.py	/^    def __len__(self): return len(self.x)$/;"	m	class:LabeledData	file:
__len__	modules/exp/nb_12.py	/^    def __len__(self) -> int: return len(self.data_source)$/;"	m	class:SortishSampler	file:
__len__	modules/exp/nb_12.py	/^    def __len__(self): return ((self.n_batch-1) \/\/ self.bptt) * self.bs$/;"	m	class:LM_PreLoader	file:
__len__	modules/exp/nb_12.py	/^    def __len__(self): return len(self.data_source)$/;"	m	class:SortSampler	file:
__repr__	modules/exp/nb_04.py	/^    def __repr__(self):$/;"	m	class:AvgStats	file:
__repr__	modules/exp/nb_06.py	/^    def __repr__(self):$/;"	m	class:ListContainer	file:
__repr__	modules/exp/nb_08.py	/^    def __repr__(self): return f'{self.__class__.__name__}\\nTrain: {self.train}\\nValid: {self.valid}\\n'$/;"	m	class:SplitData	file:
__repr__	modules/exp/nb_08.py	/^    def __repr__(self): return f'{self.__class__.__name__}\\nx: {self.x}\\ny: {self.y}\\n'$/;"	m	class:LabeledData	file:
__repr__	modules/exp/nb_08.py	/^    def __repr__(self): return f'{super().__repr__()}\\nPath: {self.path}'$/;"	m	class:ItemList	file:
__setitem__	modules/exp/nb_06.py	/^    def __setitem__(self, i, o): self.items[i] = o$/;"	m	class:ListContainer	file:
__setstate__	modules/exp/nb_08.py	/^    def __setstate__(self,data:Any): self.__dict__.update(data)$/;"	m	class:SplitData	file:
_apply_attention	modules/exp/nb_translation.py	/^    def _apply_attention(self, q:Tensor, k:Tensor, v:Tensor, mask:Tensor=None):$/;"	f
_apply_attention	modules/transformer.py	/^    def _apply_attention(self, q:Tensor, k:Tensor, v:Tensor, mask:Tensor=None):$/;"	m	class:MultiHeadAttention
_attention_einsum	modules/exp/nb_translation.py	/^    def _attention_einsum(self, q:Tensor, k:Tensor, v:Tensor, mask:Tensor=None):$/;"	f
_attention_einsum	modules/transformer.py	/^    def _attention_einsum(self, q:Tensor, k:Tensor, v:Tensor, mask:Tensor=None):$/;"	m	class:MultiHeadAttention
_bunch	modules/exp/nb_translation.py	/^    _bunch = Seq2SeqDataBunch$/;"	v
_camel_re1	modules/exp/nb_04.py	/^_camel_re1 = re.compile('(.)([A-Z][a-z]+)')$/;"	v
_camel_re2	modules/exp/nb_04.py	/^_camel_re2 = re.compile('([a-z0-9])([A-Z])')$/;"	v
_defaults	modules/exp/nb_09.py	/^    _defaults = dict(mom=0.9)$/;"	v	class:AverageGrad
_defaults	modules/exp/nb_09.py	/^    _defaults = dict(sqr_mom=0.99)$/;"	v	class:AverageSqrGrad
_defaults	modules/exp/nb_09.py	/^    _defaults = {}$/;"	v	class:Stat
_get	modules/exp/nb_08.py	/^    def _get(self, i): return compose(self.get(i), self.tfms)$/;"	m	class:ItemList
_get_files	modules/exp/nb_08.py	/^def _get_files(p, fs, extensions=None):$/;"	f
_inner	modules/exp/nb_05.py	/^    def _inner(pos):$/;"	f	function:combine_scheds
_inner	modules/exp/nb_05.py	/^    def _inner(start, end): return partial(f, start, end)$/;"	f	function:annealer
_inner	modules/exp/nb_06.py	/^    def _inner(x): return x.view(*((-1,)+size))$/;"	f	function:view_tfm
_label_by_func	modules/exp/nb_08.py	/^def _label_by_func(ds, f, cls=ItemList): return cls([f(o) for o in ds.items], path=ds.path)$/;"	f
_label_cls	modules/exp/nb_translation.py	/^    _label_cls = TextList$/;"	v
_m	modules/exp/nb_08.py	/^_m = tensor([0.47, 0.48, 0.45])$/;"	v
_make_layer	modules/exp/nb_11.py	/^    def _make_layer(expansion, ni, nf, n_blocks, stride):$/;"	m	class:XResNet
_one_hidden	modules/exp/nb_12a.py	/^    def _one_hidden(self, l):$/;"	m	class:AWD_LSTM
_order	modules/cnn-lstm.py	/^    _order = 30$/;"	v	class:DummyChannel
_order	modules/cnn-lstm.py	/^    _order=12$/;"	v	class:Reshape
_order	modules/exp/nb_04.py	/^    _order=0$/;"	v	class:Callback
_order	modules/exp/nb_05.py	/^    _order=1$/;"	v	class:ParamScheduler
_order	modules/exp/nb_05b.py	/^    _order=0$/;"	v	class:Callback
_order	modules/exp/nb_05b.py	/^    _order=1$/;"	v	class:LR_Find
_order	modules/exp/nb_05b.py	/^    _order=1$/;"	v	class:ParamScheduler
_order	modules/exp/nb_06.py	/^    _order=2$/;"	v	class:BatchTransformXCallback
_order	modules/exp/nb_08.py	/^    _order=10$/;"	v	class:ResizeFixed
_order	modules/exp/nb_09.py	/^    _order=1$/;"	v	class:LR_Find
_order	modules/exp/nb_09.py	/^    _order=1$/;"	v	class:ParamScheduler
_order	modules/exp/nb_09c.py	/^    _order=-1$/;"	v	class:ProgressCallback
_order	modules/exp/nb_10b.py	/^    _order = 90 #Runs after normalization and cuda$/;"	v	class:MixUp
_order	modules/exp/nb_10c.py	/^    _order = 99$/;"	v	class:MixedPrecision
_order	modules/exp/nb_11a.py	/^    _order = 999$/;"	v	class:DebugCallback
_order	modules/hapkim-custom.py	/^    _order = 20$/;"	v	class:PadorTrim
_order	modules/hapkim-custom.py	/^    _order = 30$/;"	v	class:DummyChannel
_order	modules/hapkim-custom.py	/^    _order=1$/;"	v	class:LR_Find
_order	modules/hapkim-custom.py	/^    _order=12$/;"	v	class:Reshape
_order	modules/hapkim-custom.py	/^    _order=99$/;"	v	class:SpecAugment
_order	modules/ser-code-convert-submissionverison .py	/^    _order = 20$/;"	v	class:PadorTrim
_order	modules/ser-code-convert-submissionverison .py	/^    _order = 30$/;"	v	class:DummyChannel
_order	modules/ser-code-convert-submissionverison .py	/^    _order=12$/;"	v	class:Reshape
_order	modules/ser-code-convert-submissionverison .py	/^    _order=99$/;"	v	class:SpecAugment
_order	modules/ser-code-interpret.py	/^    _order = 20$/;"	v	class:PadorTrim
_order	modules/ser-code-interpret.py	/^    _order = 30$/;"	v	class:DummyChannel
_order	modules/ser-code-interpret.py	/^    _order=12$/;"	v	class:Reshape
_order	modules/ser-code-interpret.py	/^    _order=99$/;"	v	class:SpecAugment
_replace_rep	modules/exp/nb_12.py	/^    def _replace_rep(m:Collection[str]) -> str:$/;"	f	function:replace_rep
_replace_wrep	modules/exp/nb_12.py	/^    def _replace_wrep(m:Collection[str]) -> str:$/;"	f	function:replace_wrep
_s	modules/exp/nb_08.py	/^_s = tensor([0.29, 0.28, 0.30])$/;"	v
_setweights	modules/exp/nb_12a.py	/^    def _setweights(self):$/;"	m	class:WeightDropout
accumulate	modules/exp/nb_04.py	/^    def accumulate(self, run):$/;"	m	class:AvgStats
accuracy	modules/exp/nb_03.py	/^def accuracy(out, yb): return (torch.argmax(out, dim=1)==yb).float().mean()$/;"	f
accuracy_flat	modules/exp/nb_12a.py	/^def accuracy_flat(input, target):$/;"	f
accuracy_flat	modules/hapkim-custom.py	/^def accuracy_flat(input, target):$/;"	f
act_fn	modules/exp/nb_11.py	/^act_fn = nn.ReLU(inplace=True)$/;"	v
adam_opt	modules/exp/nb_09.py	/^def adam_opt(xtra_step=None, **kwargs):$/;"	f
adam_step	modules/exp/nb_09.py	/^def adam_step(p, lr, mom, mom_damp, step, sqr_mom, sqr_damp, grad_avg, sqr_avg, eps, **kwargs):$/;"	f
add_cb	modules/exp/nb_09b.py	/^    def add_cb(self, cb):$/;"	m	class:Learner
add_cbs	modules/exp/nb_09b.py	/^    def add_cbs(self, cbs):$/;"	m	class:Learner
add_eos_bos	modules/exp/nb_12.py	/^def add_eos_bos(x): return [BOS] + x + [EOS]$/;"	f
after_backward	modules/exp/nb_10c.py	/^    def after_backward(self):$/;"	m	class:MixedPrecision
after_backward	modules/exp/nb_12a.py	/^    def after_backward(self):$/;"	m	class:GradientClipping
after_batch	modules/exp/nb_04.py	/^    def after_batch(self):$/;"	m	class:TrainEvalCallback
after_batch	modules/exp/nb_05.py	/^    def after_batch(self):$/;"	m	class:Recorder
after_batch	modules/exp/nb_05b.py	/^    def after_batch(self):$/;"	m	class:Recorder
after_batch	modules/exp/nb_05b.py	/^    def after_batch(self):$/;"	m	class:TrainEvalCallback
after_batch	modules/exp/nb_09.py	/^    def after_batch(self):$/;"	m	class:Recorder
after_batch	modules/exp/nb_09c.py	/^    def after_batch(self): self.pb.update(self.iter)$/;"	m	class:ProgressCallback
after_batch	modules/hapkim-custom.py	/^    def after_batch(self):$/;"	m	class:Recorder
after_epoch	modules/exp/nb_05b.py	/^    def after_epoch(self):$/;"	m	class:AvgStatsCallback
after_epoch	modules/exp/nb_09b.py	/^    def after_epoch(self):$/;"	m	class:AvgStatsCallback
after_epoch	modules/exp/nb_09c.py	/^    def after_epoch(self):$/;"	m	class:AvgStatsCallback
after_fit	modules/exp/nb_09c.py	/^    def after_fit(self): self.mbar.on_iter_end()$/;"	m	class:ProgressCallback
after_fit	modules/exp/nb_10b.py	/^    def after_fit(self): self.run.loss_func = self.old_loss_func$/;"	m	class:MixUp
after_loss	modules/exp/nb_05b.py	/^    def after_loss(self):$/;"	m	class:AvgStatsCallback
after_loss	modules/exp/nb_09b.py	/^    def after_loss(self):$/;"	m	class:AvgStatsCallback
after_loss	modules/exp/nb_09c.py	/^    def after_loss(self):$/;"	m	class:AvgStatsCallback
after_loss	modules/exp/nb_10c.py	/^    def after_loss(self):$/;"	m	class:MixedPrecision
after_loss	modules/exp/nb_12a.py	/^    def after_loss(self):$/;"	m	class:RNNTrainer
after_loss	modules/hapkim-custom.py	/^    def after_loss(self):$/;"	m	class:RNNTrainer
after_pred	modules/exp/nb_10c.py	/^    def after_pred(self):  self.run.pred = self.run.pred.float() #Compute the loss in FP32$/;"	m	class:MixedPrecision
after_pred	modules/exp/nb_12a.py	/^    def after_pred(self):$/;"	m	class:RNNTrainer
after_pred	modules/hapkim-custom.py	/^    def after_pred(self):$/;"	m	class:RNNTrainer
after_step	modules/exp/nb_05b.py	/^    def after_step(self):$/;"	m	class:LR_Find
after_step	modules/exp/nb_09.py	/^    def after_step(self):$/;"	m	class:LR_Find
after_step	modules/exp/nb_10c.py	/^    def after_step(self):$/;"	m	class:MixedPrecision
after_step	modules/hapkim-custom.py	/^    def after_step(self):$/;"	m	class:LR_Find
al	modules/cnn-lstm.py	/^al=AudioList.from_files(train_path, tfms=tfms)$/;"	v
al	modules/hapkim-custom.py	/^al=AudioList.from_files(dev_path, tfms=tfms)$/;"	v
al	modules/hapkim-custom.py	/^al=AudioList.from_files(train_path, tfms=tfms)$/;"	v
al	modules/ser-code-convert-submissionverison .py	/^al=AudioList.from_files(train_path, tfms=tfms)$/;"	v
al	modules/ser-code-interpret.py	/^al=AudioList.from_files(train_path, tfms=tfms)$/;"	v
al_dev	modules/cnn-lstm.py	/^al_dev=AudioList.from_files(dev_path, tfms=tfms)$/;"	v
al_dev	modules/ser-code-convert-submissionverison .py	/^al_dev=AudioList.from_files(dev_path, tfms=tfms)$/;"	v
al_dev	modules/ser-code-interpret.py	/^al_dev=AudioList.from_files(dev_path, tfms=tfms)$/;"	v
all_batches	modules/exp/nb_04.py	/^    def all_batches(self, dl):$/;"	m	class:Runner
all_batches	modules/exp/nb_05b.py	/^    def all_batches(self, dl):$/;"	m	class:Runner
all_batches	modules/exp/nb_09b.py	/^    def all_batches(self):$/;"	m	class:Learner
all_stats	modules/exp/nb_04.py	/^    def all_stats(self): return [self.tot_loss.item()] + self.tot_mets$/;"	m	class:AvgStats
annealer	modules/exp/nb_05.py	/^def annealer(f):$/;"	f
apex	modules/exp/nb_10c.py	/^import apex.fp16_utils as fp16$/;"	i
append	modules/transformer.py	/^    def append(self,l):      return self.layers.append(l)$/;"	m	class:SequentialEx
append_stats	modules/exp/nb_06.py	/^def append_stats(hook, mod, inp, outp):$/;"	f
avg_stats	modules/exp/nb_04.py	/^    def avg_stats(self): return [o\/self.count for o in self.all_stats]$/;"	m	class:AvgStats
batchify	modules/exp/nb_12.py	/^    def batchify(self):$/;"	m	class:LM_PreLoader
begin_batch	modules/exp/nb_05.py	/^    def begin_batch(self):$/;"	m	class:ParamScheduler
begin_batch	modules/exp/nb_05b.py	/^    def begin_batch(self):$/;"	m	class:LR_Find
begin_batch	modules/exp/nb_05b.py	/^    def begin_batch(self):$/;"	m	class:ParamScheduler
begin_batch	modules/exp/nb_06.py	/^    def begin_batch(self): self.run.xb = self.tfm(self.xb)$/;"	m	class:BatchTransformXCallback
begin_batch	modules/exp/nb_06.py	/^    def begin_batch(self): self.run.xb,self.run.yb = self.xb.cuda(),self.yb.cuda()$/;"	m	class:CudaCallback
begin_batch	modules/exp/nb_09.py	/^    def begin_batch(self):$/;"	m	class:LR_Find
begin_batch	modules/exp/nb_09.py	/^    def begin_batch(self):$/;"	m	class:ParamScheduler
begin_batch	modules/exp/nb_10b.py	/^    def begin_batch(self):$/;"	m	class:MixUp
begin_batch	modules/exp/nb_10c.py	/^    def begin_batch(self): self.run.xb = self.run.xb.half() #Put the inputs to half precision$/;"	m	class:MixedPrecision
begin_batch	modules/hapkim-custom.py	/^    def begin_batch(self): $/;"	m	class:LR_Find
begin_epoch	modules/exp/nb_04.py	/^    def begin_epoch(self):$/;"	m	class:TrainEvalCallback
begin_epoch	modules/exp/nb_05b.py	/^    def begin_epoch(self):$/;"	m	class:AvgStatsCallback
begin_epoch	modules/exp/nb_05b.py	/^    def begin_epoch(self):$/;"	m	class:TrainEvalCallback
begin_epoch	modules/exp/nb_09b.py	/^    def begin_epoch(self):$/;"	m	class:AvgStatsCallback
begin_epoch	modules/exp/nb_09c.py	/^    def begin_epoch   (self): self.set_pb()$/;"	m	class:ProgressCallback
begin_epoch	modules/exp/nb_09c.py	/^    def begin_epoch(self):$/;"	m	class:AvgStatsCallback
begin_epoch	modules/exp/nb_12a.py	/^    def begin_epoch(self):$/;"	m	class:RNNTrainer
begin_epoch	modules/hapkim-custom.py	/^    def begin_epoch(self):$/;"	m	class:RNNTrainer
begin_fit	modules/exp/nb_04.py	/^    def begin_fit(self):$/;"	m	class:TrainEvalCallback
begin_fit	modules/exp/nb_05.py	/^    def begin_fit(self):$/;"	m	class:ParamScheduler
begin_fit	modules/exp/nb_05.py	/^    def begin_fit(self):$/;"	m	class:Recorder
begin_fit	modules/exp/nb_05b.py	/^    def begin_fit(self):$/;"	m	class:ParamScheduler
begin_fit	modules/exp/nb_05b.py	/^    def begin_fit(self):$/;"	m	class:Recorder
begin_fit	modules/exp/nb_05b.py	/^    def begin_fit(self):$/;"	m	class:TrainEvalCallback
begin_fit	modules/exp/nb_06.py	/^    def begin_fit(self): self.model.cuda()$/;"	m	class:CudaCallback
begin_fit	modules/exp/nb_09.py	/^    def begin_fit(self): self.lrs,self.losses = [],[]$/;"	m	class:Recorder
begin_fit	modules/exp/nb_09c.py	/^    def begin_fit(self):$/;"	m	class:AvgStatsCallback
begin_fit	modules/exp/nb_09c.py	/^    def begin_fit(self):$/;"	m	class:ProgressCallback
begin_fit	modules/exp/nb_10b.py	/^    def begin_fit(self): self.old_loss_func,self.run.loss_func = self.run.loss_func,self.loss_func$/;"	m	class:MixUp
begin_fit	modules/exp/nb_10c.py	/^    def begin_fit(self):$/;"	m	class:MixedPrecision
begin_fit	modules/hapkim-custom.py	/^    def begin_fit(self): self.lrs,self.losses = [],[]$/;"	m	class:Recorder
begin_validate	modules/exp/nb_04.py	/^    def begin_validate(self):$/;"	m	class:TrainEvalCallback
begin_validate	modules/exp/nb_05b.py	/^    def begin_validate(self):$/;"	m	class:TrainEvalCallback
begin_validate	modules/exp/nb_09c.py	/^    def begin_validate(self): self.set_pb()$/;"	m	class:ProgressCallback
bs	modules/cnn-lstm.py	/^bs=64$/;"	v
bs	modules/exp/train_imagenette.py	/^bs = 32$/;"	v
bs	modules/hapkim-custom.py	/^bs=64$/;"	v
bs	modules/ser-code-convert-submissionverison .py	/^bs=64$/;"	v
bs	modules/ser-code-interpret.py	/^bs=64$/;"	v
c_in	modules/cnn-lstm.py	/^c_in = ll.train[0][0].shape[0]$/;"	v
c_in	modules/hapkim-custom.py	/^c_in = ll.train[0][0].shape[0]$/;"	v
c_in	modules/ser-code-convert-submissionverison .py	/^c_in = ll.train[0][0].shape[0]$/;"	v
c_in	modules/ser-code-interpret.py	/^c_in = ll.train[0][0].shape[0]$/;"	v
c_out	modules/cnn-lstm.py	/^c_out = len(uniqueify(ll.train.y))$/;"	v
c_out	modules/hapkim-custom.py	/^c_out = len(uniqueify(ll.train.y))$/;"	v
c_out	modules/ser-code-convert-submissionverison .py	/^c_out = len(uniqueify(ll.train.y))$/;"	v
c_out	modules/ser-code-interpret.py	/^c_out = len(uniqueify(ll.train.y))$/;"	v
camel2snake	modules/exp/nb_04.py	/^def camel2snake(name):$/;"	f
cb_types	modules/exp/nb_11a.py	/^cb_types = SimpleNamespace(**{o:o for o in Learner.ALL_CBS})$/;"	v
cbs	modules/hapkim-custom.py	/^cbs = [partial(AvgStatsCallback,accuracy_flat),$/;"	v
children	modules/exp/nb_06.py	/^def children(m): return list(m.children())$/;"	f
clas_databunchify	modules/exp/nb_12.py	/^def clas_databunchify(sd, bs, **kwargs):$/;"	f
classification_report	modules/cnn-lstm.py	/^from sklearn.metrics import classification_report, f1_score, confusion_matrix$/;"	i
classification_report	modules/ser-code-interpret.py	/^from sklearn.metrics import classification_report, f1_score, confusion_matrix$/;"	i
cm	modules/cnn-lstm.py	/^def cm(true_label, pred_label, clf, img_path=root_path\/'interpret\/xtesnet50-5epochs.png'):$/;"	f
cm	modules/ser-code-interpret.py	/^def cm(true_label, pred_label, clf, img_path=root_path\/'interpret\/xtesnet50-5epochs.png'):$/;"	f
cnn_learner	modules/exp/nb_11.py	/^def cnn_learner(arch, data, loss_func, opt_func, c_in=None, c_out=None,$/;"	f
cnn_learner	modules/hapkim-custom.py	/^def cnn_learner(arch, data, loss_func, opt_func, c_in=None, c_out=None,$/;"	f
collections	modules/exp/nb_12.py	/^import collections$/;"	i
combine_scheds	modules/exp/nb_05.py	/^def combine_scheds(pcts, scheds):$/;"	f
compose	modules/exp/nb_08.py	/^def compose(x, funcs, *args, order_key='_order', **kwargs):$/;"	f
confusion_matrix	modules/cnn-lstm.py	/^from sklearn.metrics import classification_report, f1_score, confusion_matrix$/;"	i
confusion_matrix	modules/ser-code-interpret.py	/^from sklearn.metrics import classification_report, f1_score, confusion_matrix$/;"	i
conv	modules/exp/nb_11.py	/^def conv(ni, nf, ks=3, stride=1, bias=False):$/;"	f
conv_layer	modules/exp/nb_06.py	/^def conv_layer(ni, nf, ks=3, stride=2, **kwargs):$/;"	f
conv_layer	modules/exp/nb_07.py	/^def conv_layer(ni, nf, ks=3, stride=2, bn=True, **kwargs):$/;"	f
conv_layer	modules/exp/nb_11.py	/^def conv_layer(ni, nf, ks=3, stride=1, zero_bn=False, act=True):$/;"	f
corrects	modules/exp/nb_bleu.py	/^corrects = [get_correct_ngrams(pred,targ,n,max_n=max_n) for n in range(1,5)]$/;"	v
cos_1cycle_anneal	modules/exp/nb_05.py	/^def cos_1cycle_anneal(start, high, end):$/;"	f
create	modules/exp/nb_11.py	/^    def create(cls, expansion, layers, c_in=3, c_out=1000):$/;"	m	class:XResNet
create	modules/exp/nb_translation.py	/^    def create(cls, train_ds, valid_ds, test_ds=None, path:PathOrStr='.', bs:int=32, val_bs:int=None, pad_idx=1,$/;"	f
create_learner	modules/exp/nb_05.py	/^def create_learner(model_func, loss_func, data):$/;"	f
create_phases	modules/exp/nb_11.py	/^def create_phases(phases):$/;"	f
cross_entropy_flat	modules/exp/nb_12a.py	/^def cross_entropy_flat(input, target):$/;"	f
cross_entropy_flat	modules/hapkim-custom.py	/^def cross_entropy_flat(input, target):$/;"	f
data	modules/cnn-lstm.py	/^data = ll.to_databunch(bs,c_in=c_in,c_out=c_out)$/;"	v
data	modules/exp/nb_04.py	/^    def data(self):      return self.learn.data$/;"	m	class:Runner
data	modules/exp/nb_05b.py	/^    def data(self):      return self.learn.data$/;"	m	class:Runner
data	modules/exp/train_imagenette.py	/^data = ll.to_databunch(bs, c_in=3, c_out=10, num_workers=8)$/;"	v
data	modules/hapkim-custom.py	/^data = ll.to_databunch(bs,c_in=c_in,c_out=c_out)$/;"	v
data	modules/ser-code-convert-submissionverison .py	/^data = ll.to_databunch(bs,c_in=c_in,c_out=c_out)$/;"	v
data	modules/ser-code-interpret.py	/^data = ll.to_databunch(bs,c_in=c_in,c_out=c_out)$/;"	v
data_path	modules/hapkim-custom.py	/^data_path = Path('\/content\/data'); data_path.mkdir()$/;"	v
databunchify	modules/exp/nb_08.py	/^def databunchify(sd, bs, c_in=None, c_out=None, **kwargs):$/;"	f
datasets	modules/exp/nb_01.py	/^from fastai import datasets$/;"	i
deal_caps	modules/exp/nb_12.py	/^def deal_caps(x):$/;"	f
debias	modules/exp/nb_09.py	/^def debias(mom, damp, step): return damp * (1 - mom**step) \/ (1-mom)$/;"	f
default_crop_size	modules/exp/nb_10.py	/^    def default_crop_size(self, w,h): return [w\/self.scale,h\/self.scale]$/;"	m	class:CenterCrop
default_crop_size	modules/exp/nb_10.py	/^    def default_crop_size(self, w,h): return default_crop_size(w,h)$/;"	m	class:GeneralCrop
default_crop_size	modules/exp/nb_10.py	/^def default_crop_size(w,h): return [w,w] if w < h else [h,h]$/;"	f
default_post_rules	modules/exp/nb_12.py	/^default_post_rules = [deal_caps, replace_all_caps, add_eos_bos]$/;"	v
default_pre_rules	modules/exp/nb_12.py	/^default_pre_rules = [fixup_text, replace_rep, replace_wrep, spec_add_spaces, rm_useless_spaces, sub_br]$/;"	v
default_spec_tok	modules/exp/nb_12.py	/^default_spec_tok = [UNK, PAD, BOS, EOS, TK_REP, TK_WREP, TK_UP, TK_MAJ]$/;"	v
defaultdict	modules/hapkim-custom.py	/^from collections import defaultdict$/;"	i
deproc1	modules/exp/nb_08.py	/^    def deproc1(self, idx): return self.vocab[idx]$/;"	m	class:CategoryProcessor
deproc1	modules/exp/nb_12.py	/^    def deproc1(self, idx): return [self.vocab[i] for i in idx]$/;"	m	class:NumericalizeProcessor
deproc1	modules/exp/nb_12.py	/^    def deproc1(self, tok):    return " ".join(tok)$/;"	m	class:TokenizeProcessor
deprocess	modules/exp/nb_08.py	/^    def deprocess(self, idxs):$/;"	m	class:CategoryProcessor
deprocess	modules/exp/nb_12.py	/^    def deprocess(self, idxs):$/;"	m	class:NumericalizeProcessor
deprocess	modules/exp/nb_12.py	/^    def deprocess(self, toks): return [self.deproc1(tok) for tok in toks]$/;"	m	class:TokenizeProcessor
dev_path	modules/hapkim-custom.py	/^dev_path = (path2\/'data\/v1\/dev')$/;"	v
dev_path	modules/ser-code-convert-submissionverison .py	/^dev_path = (root_path\/'data\/v1\/dev')$/;"	v
dev_path	modules/ser-code-interpret.py	/^dev_path = (root_path\/'data\/v1\/dev')$/;"	v
display	modules/cnn-lstm.py	/^from IPython import html, display$/;"	i
display	modules/exp/nb_06.py	/^from IPython.display import display, Javascript$/;"	i
display	modules/ser-code-interpret.py	/^from IPython import html, display$/;"	i
do_begin_epoch	modules/exp/nb_09b.py	/^    def do_begin_epoch(self, epoch):$/;"	m	class:Learner
do_begin_fit	modules/exp/nb_09b.py	/^    def do_begin_fit(self, epochs):$/;"	m	class:Learner
drive	modules/hapkim-custom.py	/^from google.colab import drive$/;"	i
drive	modules/ser-code-convert-submissionverison .py	/^from google.colab import drive$/;"	i
drive	modules/ser-code-interpret.py	/^from google.colab import drive$/;"	i
drive_data_path	modules/hapkim-custom.py	/^drive_data_path = ser_path\/'data'$/;"	v
dropout_mask	modules/exp/nb_12a.py	/^def dropout_mask(x, sz, p):$/;"	f
emotion_labeler	modules/cnn-lstm.py	/^emotion_labeler = partial(re_labeler, pat=label_pat, subcl='all')$/;"	v
emotion_labeler	modules/hapkim-custom.py	/^emotion_labeler = partial(re_labeler, pat=label_pat, subcl='all')$/;"	v
emotion_labeler	modules/ser-code-convert-submissionverison .py	/^emotion_labeler = partial(re_labeler, pat=label_pat, subcl='all')$/;"	v
emotion_labeler	modules/ser-code-interpret.py	/^emotion_labeler = partial(re_labeler, pat=label_pat, subcl='all')$/;"	v
epochs	modules/exp/train_imagenette.py	/^epochs = 5$/;"	v
eps	modules/exp/train_imagenette.py	/^eps = 1e-6$/;"	v
extend	modules/transformer.py	/^    def extend(self,l):      return self.layers.extend(l)$/;"	m	class:SequentialEx
f	modules/exp/nb_08.py	/^    def f(ni, nf, stride=2): return layer(ni, nf, 3, stride=stride, **kwargs)$/;"	f	function:get_cnn_layers
f1_score	modules/cnn-lstm.py	/^from sklearn.metrics import classification_report, f1_score, confusion_matrix$/;"	i
f1_score	modules/hapkim-custom.py	/^from sklearn.metrics import f1_score$/;"	i
f1_score	modules/ser-code-interpret.py	/^from sklearn.metrics import classification_report, f1_score, confusion_matrix$/;"	i
features	modules/hapkim-custom.py	/^features = [torch.load(path).t() for path in (data_path\/'ser\/dev').ls()[:100]] # (n_logmel, frames) each element will have differnt shape on 2nd dim$/;"	v
feedforward	modules/transformer.py	/^def feedforward(d_model:int, d_ff:int, ff_p=0., double_drop=None):$/;"	f
find_coeffs	modules/exp/nb_10.py	/^def find_coeffs(orig_pts, targ_pts):$/;"	f
find_modules	modules/exp/nb_07a.py	/^def find_modules(m, cond):$/;"	f
fire	modules/exp/notebook2script.py	/^import json,fire,re$/;"	i
fire	modules/run_notebook.py	/^import nbformat,fire$/;"	i
fit	modules/exp/nb_04.py	/^    def fit(self, epochs, learn):$/;"	m	class:Runner
fit	modules/exp/nb_05b.py	/^    def fit(self, epochs, learn):$/;"	m	class:Runner
fit	modules/exp/nb_09b.py	/^    def fit(self, epochs, cbs=None, reset_opt=False):$/;"	m	class:Learner
fixup_text	modules/exp/nb_12.py	/^def fixup_text(x):$/;"	f
flatten	modules/exp/nb_06.py	/^def flatten(x):      return x.view(x.shape[0], -1)$/;"	f
format_time	modules/exp/nb_09c.py	/^from fastprogress.fastprogress import format_time$/;"	i
forward	modules/exp/nb_06.py	/^    def forward(self, x): return self.func(x)$/;"	m	class:Lambda
forward	modules/exp/nb_06.py	/^    def forward(self, x):$/;"	m	class:GeneralRelu
forward	modules/exp/nb_07.py	/^    def forward(self, x):$/;"	m	class:RunningBatchNorm
forward	modules/exp/nb_10b.py	/^    def forward(self, output, target):$/;"	m	class:LabelSmoothingCrossEntropy
forward	modules/exp/nb_11.py	/^    def forward(self, x): return act_fn(self.convs(x) + self.idconv(self.pool(x)))$/;"	m	class:ResBlock
forward	modules/exp/nb_11.py	/^    def forward(self, x): return x.view(x.size(0), -1)$/;"	m	class:Flatten
forward	modules/exp/nb_11a.py	/^    def forward(self, x): return torch.cat([self.mp(x), self.ap(x)], 1)$/;"	m	class:AdaptiveConcatPool2d
forward	modules/exp/nb_12a.py	/^    def forward(self, *args):$/;"	m	class:WeightDropout
forward	modules/exp/nb_12a.py	/^    def forward(self, input):$/;"	m	class:AWD_LSTM
forward	modules/exp/nb_12a.py	/^    def forward(self, input):$/;"	m	class:LinearDecoder
forward	modules/exp/nb_12a.py	/^    def forward(self, words, scale=None):$/;"	m	class:EmbeddingDropout
forward	modules/exp/nb_12a.py	/^    def forward(self, x):$/;"	m	class:RNNDropout
forward	modules/exp/nb_translation.py	/^    def forward(self, inp):$/;"	f
forward	modules/exp/nb_translation.py	/^    def forward(self, inp, out):$/;"	f
forward	modules/exp/nb_translation.py	/^    def forward(self, pos:Tensor):$/;"	f
forward	modules/exp/nb_translation.py	/^    def forward(self, q:Tensor, k:Tensor, v:Tensor, mask:Tensor=None):$/;"	f
forward	modules/exp/nb_translation.py	/^    def forward(self, x:Tensor, enc:Tensor, mask_in:Tensor=None, mask_out:Tensor=None):$/;"	f
forward	modules/exp/nb_translation.py	/^    def forward(self, x:Tensor, mask:Tensor=None): return self.ff(self.mha(x, x, x, mask=mask))$/;"	f
forward	modules/transformer.py	/^    def forward(self, q:Tensor, k:Tensor, v:Tensor, mask:Tensor=None):$/;"	m	class:MultiHeadAttention
forward	modules/transformer.py	/^    def forward(self, x): return torch.cat([x,x.orig], dim=1) if self.dense else (x+x.orig)$/;"	m	class:MergeLayer
forward	modules/transformer.py	/^    def forward(self, x):$/;"	m	class:SequentialEx
fp16	modules/exp/nb_10c.py	/^import apex.fp16_utils as fp16$/;"	i
from_files	modules/cnn-lstm.py	/^    def from_files(cls, path, extensions = None, recurse=True, include=None, **kwargs):$/;"	m	class:AudioList
from_files	modules/exp/nb_08.py	/^    def from_files(cls, path, extensions=None, recurse=True, include=None, **kwargs):$/;"	m	class:ImageList
from_files	modules/exp/nb_12.py	/^    def from_files(cls, path, extensions='.txt', recurse=True, include=None, **kwargs):$/;"	m	class:TextList
from_files	modules/hapkim-custom.py	/^    def from_files(cls, path, extensions = None, recurse=True, include=None, **kwargs):$/;"	m	class:AudioList
from_files	modules/ser-code-convert-submissionverison .py	/^    def from_files(cls, path, extensions = None, recurse=True, include=None, **kwargs):$/;"	m	class:AudioList
from_files	modules/ser-code-interpret.py	/^    def from_files(cls, path, extensions = None, recurse=True, include=None, **kwargs):$/;"	m	class:AudioList
get	modules/cnn-lstm.py	/^    def get(self, fn):$/;"	m	class:AudioList
get	modules/exp/nb_08.py	/^    def  get(self, i): return i$/;"	m	class:ItemList
get	modules/exp/nb_08.py	/^    def get(self, fn): return PIL.Image.open(fn)$/;"	m	class:ImageList
get	modules/exp/nb_12.py	/^    def get(self, i):$/;"	m	class:TextList
get	modules/hapkim-custom.py	/^    def get(self, fn):$/;"	m	class:AudioList
get	modules/ser-code-convert-submissionverison .py	/^    def get(self, fn):$/;"	m	class:AudioList
get	modules/ser-code-interpret.py	/^    def get(self, fn):$/;"	m	class:AudioList
getSortedFiles	modules/exp/notebook2script.py	/^def getSortedFiles(allFiles, upTo=None):$/;"	f
get_batch	modules/exp/nb_07a.py	/^def get_batch(dl, run):$/;"	f
get_batch	modules/exp/nb_11.py	/^def get_batch(dl, learn):$/;"	f
get_clas_dls	modules/exp/nb_12.py	/^def get_clas_dls(train_ds, valid_ds, bs, **kwargs):$/;"	f
get_cnn_layers	modules/exp/nb_06.py	/^def get_cnn_layers(data, nfs, layer, **kwargs):$/;"	f
get_cnn_layers	modules/exp/nb_08.py	/^def get_cnn_layers(data, nfs, layer, **kwargs):$/;"	f
get_cnn_model	modules/exp/nb_06.py	/^def get_cnn_model(data, nfs, layer, **kwargs):$/;"	f
get_cnn_model	modules/exp/nb_08.py	/^def get_cnn_model(data, nfs, layer, **kwargs):$/;"	f
get_corners	modules/exp/nb_10.py	/^    def get_corners(self, w, h): return (0,0,w,h)$/;"	m	class:GeneralCrop
get_corners	modules/exp/nb_10.py	/^    def get_corners(self, w, h, wc, hc):$/;"	m	class:CenterCrop
get_corners	modules/exp/nb_10.py	/^    def get_corners(self, w, h, wc, hc):$/;"	m	class:RandomResizedCrop
get_data	modules/exp/nb_02.py	/^def get_data():$/;"	f
get_defaults	modules/exp/nb_09.py	/^def get_defaults(d): return getattr(d,'_defaults',{})$/;"	f
get_dls	modules/exp/nb_03.py	/^def get_dls(train_ds, valid_ds, bs, **kwargs):$/;"	f
get_files	modules/exp/nb_08.py	/^def get_files(path, extensions=None, recurse=False, include=None):$/;"	f
get_language_model	modules/exp/nb_12a.py	/^def get_language_model(vocab_sz, emb_sz, n_hid, n_layers, pad_token, output_p=0.4, hidden_p=0.2, input_p=0.6,$/;"	f
get_learn_run	modules/exp/nb_06.py	/^def get_learn_run(nfs, data, lr, layer, cbs=None, opt_func=None, uniform=False, **kwargs):$/;"	f
get_learn_run	modules/exp/nb_07.py	/^def get_learn_run(nfs, data, lr, layer, cbs=None, opt_func=None, uniform=False, **kwargs):$/;"	f
get_learn_run	modules/exp/nb_08.py	/^def get_learn_run(nfs, data, lr, layer, cbs=None, opt_func=None, **kwargs):$/;"	f
get_learner	modules/exp/nb_09b.py	/^def get_learner(nfs, data, lr, layer, loss_func=F.cross_entropy,$/;"	f
get_lm_dls	modules/exp/nb_12.py	/^def get_lm_dls(train_ds, valid_ds, bs, bptt, **kwargs):$/;"	f
get_master	modules/exp/nb_10c.py	/^def get_master(opt, flat_master=False):$/;"	f
get_model	modules/exp/nb_04.py	/^def get_model(data, lr=0.5, nh=50):$/;"	f
get_model_func	modules/exp/nb_05.py	/^def get_model_func(lr=0.5): return partial(get_model, lr=lr)$/;"	f
get_predictions	modules/cnn-lstm.py	/^def get_predictions(learn):$/;"	f
get_predictions	modules/cnn-lstm.py	/^def get_predictions(learn, dev):$/;"	f
get_predictions	modules/hapkim-custom.py	/^def get_predictions(learn, dev):$/;"	f
get_predictions	modules/ser-code-convert-submissionverison .py	/^def get_predictions(learn, dev):$/;"	f
get_predictions	modules/ser-code-interpret.py	/^def get_predictions(learn):$/;"	f
get_predictions	modules/ser-code-interpret.py	/^def get_predictions(learn, dev):$/;"	f
get_runner	modules/exp/nb_06.py	/^def get_runner(model, data, lr=0.6, cbs=None, opt_func=None, loss_func = F.cross_entropy):$/;"	f
glob	modules/exp/notebook2script.py	/^    import glob$/;"	i
grad_overflow	modules/exp/nb_10c.py	/^def grad_overflow(param_groups):$/;"	f
grad_params	modules/exp/nb_09.py	/^    def grad_params(self):$/;"	m	class:Optimizer
grandparent_splitter	modules/exp/nb_08.py	/^def grandparent_splitter(fn, valid_name='valid', train_name='train'):$/;"	f
gzip	modules/exp/nb_01.py	/^import pickle, gzip, math, torch, matplotlib as mpl$/;"	i
html	modules/cnn-lstm.py	/^from IPython import html, display$/;"	i
html	modules/exp/nb_12.py	/^import spacy,html$/;"	i
html	modules/ser-code-interpret.py	/^from IPython import html, display$/;"	i
il	modules/exp/train_imagenette.py	/^il = ImageList.from_files(path, tfms=tfms)$/;"	v
image_extensions	modules/exp/nb_08.py	/^image_extensions = set(k for k,v in mimetypes.types_map.items() if v.startswith('image\/'))$/;"	v
init	modules/exp/nb_02.py	/^from torch.nn import init$/;"	i
init	modules/exp/nb_06.py	/^from torch.nn import init$/;"	i
init_cnn	modules/exp/nb_06.py	/^def init_cnn(m, uniform=False):$/;"	f
init_cnn	modules/exp/nb_07.py	/^def init_cnn(m, uniform=False):$/;"	f
init_cnn	modules/exp/nb_11.py	/^def init_cnn(m):$/;"	f
init_cnn_	modules/exp/nb_07.py	/^def init_cnn_(m, f):$/;"	f
init_state	modules/exp/nb_09.py	/^    def init_state(self, p): raise NotImplementedError$/;"	m	class:Stat
init_state	modules/exp/nb_09.py	/^    def init_state(self, p): return {'grad_avg': torch.zeros_like(p.grad.data)}$/;"	m	class:AverageGrad
init_state	modules/exp/nb_09.py	/^    def init_state(self, p): return {'sqr_avg': torch.zeros_like(p.grad.data)}$/;"	m	class:AverageSqrGrad
init_state	modules/exp/nb_09.py	/^    def init_state(self, p): return {'step': 0}$/;"	m	class:StepCount
initrange	modules/exp/nb_12a.py	/^    initrange=0.1$/;"	v	class:AWD_LSTM
insert	modules/transformer.py	/^    def insert(self,i,l):    return self.layers.insert(i,l)$/;"	m	class:SequentialEx
io	modules/exp/notebook2script.py	/^import io$/;"	i
is_export	modules/exp/notebook2script.py	/^def is_export(cell):$/;"	f
is_lin_layer	modules/exp/nb_07a.py	/^def is_lin_layer(l):$/;"	f
json	modules/cnn-lstm.py	/^import json$/;"	i
json	modules/exp/notebook2script.py	/^import json,fire,re$/;"	i
json	modules/ser-code-convert-submissionverison .py	/^import json$/;"	i
json	modules/ser-code-interpret.py	/^import json$/;"	i
l2_reg	modules/exp/nb_09.py	/^def l2_reg(p, lr, wd, **kwargs):$/;"	f
label2ls	modules/cnn-lstm.py	/^label2ls = lambda x: list(map(lambda o: o.split(''), x))/;"	v
label2ls	modules/ser-code-interpret.py	/^label2ls = lambda x: list(map(lambda o: o.split(''), x))/;"	v
label_by_func	modules/exp/nb_08.py	/^    def label_by_func(cls, il, f, proc_x=None, proc_y=None):$/;"	m	class:LabeledData
label_by_func	modules/exp/nb_08.py	/^def label_by_func(sd, f, proc_x=None, proc_y=None):$/;"	f
label_convert	modules/cnn-lstm.py	/^label_convert = {0:[1, 1], 1:[0, 0], 2:[1,0], 3:[0, 1]}$/;"	v
label_convert	modules/ser-code-convert-submissionverison .py	/^label_convert = {0:[1, 1], 1:[0, 0], 2:[1,0], 3:[0, 1]}$/;"	v
label_convert	modules/ser-code-interpret.py	/^label_convert = {0:[1, 1], 1:[0, 0], 2:[1,0], 3:[0, 1]}$/;"	v
label_pat	modules/cnn-lstm.py	/^label_pat = r'_(\\d+)'$/;"	v
label_pat	modules/hapkim-custom.py	/^label_pat = r'_(\\d+)'$/;"	v
label_pat	modules/ser-code-convert-submissionverison .py	/^label_pat = r'_(\\d+)'$/;"	v
label_pat	modules/ser-code-interpret.py	/^label_pat = r'_(\\d+)'$/;"	v
layers	modules/exp/nb_translation.py	/^    layers = [nn.Linear(d_model, d_ff), nn.ReLU()]$/;"	v
learn	modules/cnn-lstm.py	/^learn = cnn_learner(xresnet50, data, loss_func, opt_func)$/;"	v
learn	modules/exp/train_imagenette.py	/^learn = cnn_learner(xresnet34, data, loss_func, opt_func,$/;"	v
learn	modules/hapkim-custom.py	/^learn = Learner(model, data, cross_entropy_flat, lr=5e-3, cb_funcs=cbs, opt_func=adam_opt())$/;"	v
learn	modules/hapkim-custom.py	/^learn = cnn_learner(model, data, loss_func, opt_func)$/;"	v
learn	modules/hapkim-custom.py	/^learn = cnn_learner(xresnet34, data, loss_func, opt_func)$/;"	v
learn	modules/hapkim-custom.py	/^learn = cnn_learner(xresnet50, data, loss_func, opt_func)$/;"	v
learn	modules/ser-code-convert-submissionverison .py	/^learn = cnn_learner(xresnet50, data, loss_func, opt_func)$/;"	v
learn	modules/ser-code-interpret.py	/^learn = cnn_learner(xresnet50, data, loss_func, opt_func)$/;"	v
len_penalty	modules/exp/nb_bleu.py	/^len_penalty = exp(1 - len(targ)\/len(pred)) if len(pred) < len(targ) else 1$/;"	v
len_penalty	modules/exp/nb_bleu.py	/^len_penalty = exp(1 - targ_len\/pred_len) if pred_len < targ_len else 1$/;"	v
lin_comb	modules/exp/nb_09.py	/^def lin_comb(v1, v2, beta): return beta*v1 + (1-beta)*v2$/;"	f
listify	modules/exp/nb_04.py	/^def listify(o):$/;"	f
ll	modules/cnn-lstm.py	/^ll = label_by_func(sd, emotion_labeler, proc_y=CategoryProcessor())$/;"	v
ll	modules/exp/train_imagenette.py	/^ll = label_by_func(sd, parent_labeler, proc_y=CategoryProcessor())$/;"	v
ll	modules/hapkim-custom.py	/^ll = label_by_func(sd, emotion_labeler, proc_y=CategoryProcessor())$/;"	v
ll	modules/ser-code-convert-submissionverison .py	/^ll = label_by_func(sd, emotion_labeler, proc_y=CategoryProcessor())$/;"	v
ll	modules/ser-code-interpret.py	/^ll = label_by_func(sd, emotion_labeler, proc_y=CategoryProcessor())$/;"	v
lm_databunchify	modules/exp/nb_12.py	/^def lm_databunchify(sd, bs, bptt, **kwargs):$/;"	f
loss_func	modules/cnn-lstm.py	/^loss_func = LabelSmoothingCrossEntropy()$/;"	v
loss_func	modules/exp/nb_04.py	/^    def loss_func(self): return self.learn.loss_func$/;"	m	class:Runner
loss_func	modules/exp/nb_05b.py	/^    def loss_func(self): return self.learn.loss_func$/;"	m	class:Runner
loss_func	modules/exp/nb_10b.py	/^    def loss_func(self, pred, yb):$/;"	m	class:MixUp
loss_func	modules/exp/nb_translation.py	/^                loss_func=FlattenedLoss(LabelSmoothingCrossEntropy, axis=-1))$/;"	v
loss_func	modules/exp/train_imagenette.py	/^loss_func = LabelSmoothingCrossEntropy()$/;"	v
loss_func	modules/hapkim-custom.py	/^loss_func = LabelSmoothingCrossEntropy()$/;"	v
loss_func	modules/ser-code-convert-submissionverison .py	/^loss_func = LabelSmoothingCrossEntropy()$/;"	v
loss_func	modules/ser-code-interpret.py	/^loss_func = LabelSmoothingCrossEntropy()$/;"	v
lr	modules/exp/train_imagenette.py	/^lr = 1e-2$/;"	v
lsuv_module	modules/exp/nb_07a.py	/^def lsuv_module(m, xb):$/;"	f
make_rgb	modules/exp/nb_08.py	/^def make_rgb(item): return item.convert('RGB')$/;"	f
masker	modules/cnn-lstm.py	/^masker = SpecAugment(freq_masks=2, time_masks=2, max_mask_pct=0.1)$/;"	v
masker	modules/hapkim-custom.py	/^masker = SpecAugment(freq_masks=2, time_masks=2, max_mask_pct=0.1)$/;"	v
masker	modules/ser-code-convert-submissionverison .py	/^masker = SpecAugment(freq_masks=2, time_masks=2, max_mask_pct=0.1)$/;"	v
masker	modules/ser-code-interpret.py	/^masker = SpecAugment(freq_masks=2, time_masks=2, max_mask_pct=0.1)$/;"	v
master_bar	modules/exp/nb_09c.py	/^from fastprogress import master_bar, progress_bar$/;"	i
math	modules/exp/nb_01.py	/^import pickle, gzip, math, torch, matplotlib as mpl$/;"	i
math	modules/exp/nb_08.py	/^import math$/;"	i
matplotlib	modules/exp/nb_01.py	/^import matplotlib.pyplot as plt$/;"	i
maybe_update	modules/exp/nb_09.py	/^def maybe_update(os, dest, f):$/;"	f
mimetypes	modules/exp/nb_08.py	/^import PIL,os,mimetypes$/;"	i
mixup	modules/exp/train_imagenette.py	/^mixup = 0$/;"	v
model	modules/cnn-lstm.py	/^model = nn.Sequential($/;"	v
model	modules/exp/nb_04.py	/^    def model(self):     return self.learn.model$/;"	m	class:Runner
model	modules/exp/nb_05b.py	/^    def model(self):     return self.learn.model$/;"	m	class:Runner
model	modules/hapkim-custom.py	/^model = nn.Sequential($/;"	v
model_summary	modules/exp/nb_08.py	/^def model_summary(run, learn, data, find_all=False):$/;"	f
model_summary	modules/exp/nb_11.py	/^def model_summary(model, data, find_all=False, print_mod=False):$/;"	f
module	modules/exp/notebook2script.py	/^    module = re.sub(r' +$', '', module, flags=re.MULTILINE)$/;"	v
mom	modules/exp/train_imagenette.py	/^mom=0.9$/;"	v
mom_sqr	modules/exp/train_imagenette.py	/^mom_sqr=0.99$/;"	v
momentum_step	modules/exp/nb_09.py	/^def momentum_step(p, lr, grad_avg, **kwargs):$/;"	f
mpl	modules/exp/nb_01.py	/^import pickle, gzip, math, torch, matplotlib as mpl$/;"	i
mse	modules/exp/nb_02.py	/^def mse(output, targ): return (output.squeeze(-1) - targ).pow(2).mean()$/;"	f
multi_f1score	modules/hapkim-custom.py	/^def multi_f1score(input, target):$/;"	f
n_precs	modules/exp/nb_bleu.py	/^n_precs = [c\/t for c,t in corrects]$/;"	v
n_precs	modules/exp/nb_bleu.py	/^n_precs = [c\/t for c,t in zip(n_precs,counts)]$/;"	v
name	modules/exp/nb_04.py	/^    def name(self):$/;"	m	class:Callback
name	modules/exp/nb_05b.py	/^    def name(self):$/;"	m	class:Callback
nb_auto_export	modules/exp/nb_06.py	/^def nb_auto_export():$/;"	f
nbformat	modules/run_notebook.py	/^import nbformat,fire$/;"	i
near	modules/exp/nb_01.py	/^def near(a,b): return torch.allclose(a, b, rtol=1e-3, atol=1e-5)$/;"	f
new	modules/exp/nb_08.py	/^    def new(self, items, cls=None):$/;"	m	class:ItemList
nn	modules/exp/nb_02.py	/^from torch import nn/;"	i
nn	modules/exp/nb_03.py	/^import torch.nn.functional as F$/;"	i
noop	modules/exp/nb_11.py	/^def noop(x): return x$/;"	f
norm_imagenette	modules/exp/nb_08.py	/^norm_imagenette = partial(normalize_chan, mean=_m.cuda(), std=_s.cuda())$/;"	v
normalize	modules/exp/nb_02.py	/^def normalize(x, m, s): return (x-m)\/s$/;"	f
normalize_chan	modules/exp/nb_08.py	/^def normalize_chan(x, mean, std):$/;"	f
normalize_to	modules/exp/nb_06.py	/^def normalize_to(train, valid):$/;"	f
notebook2script	modules/exp/notebook2script.py	/^def notebook2script(fname=None, allFiles=None, upTo=None):$/;"	f
notebook2scriptSingle	modules/exp/notebook2script.py	/^def notebook2scriptSingle(fname):$/;"	f
np	modules/exp/nb_10.py	/^import numpy as np$/;"	i
np_to_float	modules/exp/nb_10.py	/^def np_to_float(x): return torch.from_numpy(np.array(x, dtype=np.float32, copy=False)).permute(2,0,1).contiguous()\/255.$/;"	f
obj	modules/exp/nb_08.py	/^    def obj(self, items, idx, procs):$/;"	m	class:LabeledData
on_batch_end	modules/exp/nb_bleu.py	/^def on_batch_end(self, last_output, last_target, **kwargs):$/;"	f
on_batch_end	modules/exp/nb_translation.py	/^    def on_batch_end(self, last_output, last_target, **kwargs):$/;"	f
on_epoch_begin	modules/exp/nb_bleu.py	/^def on_epoch_begin(self, **kwargs):$/;"	f
on_epoch_begin	modules/exp/nb_translation.py	/^    def on_epoch_begin(self, **kwargs):$/;"	f
on_epoch_end	modules/exp/nb_bleu.py	/^def on_epoch_end(self, last_metrics, **kwargs):$/;"	f
on_epoch_end	modules/exp/nb_translation.py	/^    def on_epoch_end(self, last_metrics, **kwargs):$/;"	f
one_batch	modules/exp/nb_04.py	/^    def one_batch(self, xb, yb):$/;"	m	class:Runner
one_batch	modules/exp/nb_05b.py	/^    def one_batch(self, xb, yb):$/;"	m	class:Runner
one_batch	modules/exp/nb_09b.py	/^    def one_batch(self, i, xb, yb):$/;"	m	class:Learner
operator	modules/exp/nb_01.py	/^import operator$/;"	i
opt	modules/exp/nb_04.py	/^    def opt(self):       return self.learn.opt$/;"	m	class:Runner
opt	modules/exp/nb_05b.py	/^    def opt(self):       return self.learn.opt$/;"	m	class:Runner
opt_func	modules/cnn-lstm.py	/^opt_func = adam_opt(mom=0.9, mom_sqr=0.99, eps=1e-6, wd=1e-1, )$/;"	v
opt_func	modules/exp/train_imagenette.py	/^opt_func = adam_opt(mom=mom, mom_sqr=mom_sqr, eps=eps, wd=1e-2)$/;"	v
opt_func	modules/hapkim-custom.py	/^opt_func = adam_opt(mom=0.9, mom_sqr=0.99, eps=1e-6, wd=1e-1, )$/;"	v
opt_func	modules/ser-code-convert-submissionverison .py	/^opt_func = adam_opt(mom=0.9, mom_sqr=0.99, eps=1e-6, wd=1e-1, )$/;"	v
opt_func	modules/ser-code-interpret.py	/^opt_func = adam_opt(mom=0.9, mom_sqr=0.99, eps=1e-6, wd=1e-1, )$/;"	v
optim	modules/exp/nb_03.py	/^from torch import optim$/;"	i
os	modules/exp/nb_08.py	/^import PIL,os,mimetypes$/;"	i
out	modules/exp/nb_translation.py	/^            out = learn.model(*xb)$/;"	v
output_path	modules/exp/notebook2script.py	/^    output_path = fname.parent\/fname_out$/;"	v
pad_collate	modules/exp/nb_12.py	/^def pad_collate(samples, pad_idx=1, pad_first=False):$/;"	f
parallel	modules/exp/nb_12.py	/^def parallel(func, arr, max_workers=4):$/;"	f
param_getter	modules/exp/nb_09b.py	/^def param_getter(m): return m.parameters()$/;"	f
parent_labeler	modules/exp/nb_08.py	/^def parent_labeler(fn): return fn.parent.name$/;"	f
partial	modules/exp/nb_04.py	/^from functools import partial/;"	i
path	modules/exp/nb_translation.py	/^path = Config().data_path()\/'giga-fren'$/;"	v
path	modules/exp/train_imagenette.py	/^path = untar_data(url)$/;"	v
pct_start	modules/exp/train_imagenette.py	/^pct_start = 0.5$/;"	v
pcts	modules/exp/train_imagenette.py	/^pcts = create_phases(pct_start)$/;"	v
pd	modules/cnn-lstm.py	/^import pandas as pd$/;"	i
pd	modules/ser-code-interpret.py	/^import pandas as pd$/;"	i
pg_dicts	modules/exp/nb_05.py	/^def pg_dicts(pgs): return [{'params':o} for o in pgs]$/;"	f
pickle	modules/exp/nb_01.py	/^import pickle, gzip, math, torch, matplotlib as mpl$/;"	i
plot	modules/exp/nb_05b.py	/^    def plot(self, skip_last=0, pgid=-1):$/;"	m	class:Recorder
plot	modules/exp/nb_09.py	/^    def plot(self, skip_last=0):$/;"	m	class:Recorder
plot	modules/hapkim-custom.py	/^    def plot(self, skip_last=0):$/;"	m	class:Recorder
plot_loss	modules/exp/nb_05.py	/^    def plot_loss(self, skip_last=0): plt.plot(self.losses[:len(self.losses)-skip_last])$/;"	m	class:Recorder
plot_loss	modules/exp/nb_05b.py	/^    def plot_loss(self, skip_last=0): plt.plot(self.losses[:len(self.losses)-skip_last])$/;"	m	class:Recorder
plot_loss	modules/exp/nb_09.py	/^    def plot_loss(self): plt.plot(self.losses)$/;"	m	class:Recorder
plot_loss	modules/hapkim-custom.py	/^    def plot_loss(self): plt.plot(self.losses)$/;"	m	class:Recorder
plot_lr	modules/exp/nb_05.py	/^    def plot_lr  (self, pgid=-1): plt.plot(self.lrs[pgid])$/;"	m	class:Recorder
plot_lr	modules/exp/nb_05b.py	/^    def plot_lr  (self, pgid=-1): plt.plot(self.lrs[pgid])$/;"	m	class:Recorder
plot_lr	modules/exp/nb_09.py	/^    def plot_lr  (self): plt.plot(self.lrs)$/;"	m	class:Recorder
plot_lr	modules/hapkim-custom.py	/^    def plot_lr  (self): plt.plot(self.lrs)$/;"	m	class:Recorder
plt	modules/exp/nb_01.py	/^import matplotlib.pyplot as plt$/;"	i
pred	modules/exp/nb_bleu.py	/^pred = [1,2,3,7,5,1,1]$/;"	v
prev_pow_2	modules/exp/nb_08.py	/^def prev_pow_2(x): return 2**math.floor(math.log2(x))$/;"	f
proc1	modules/exp/nb_08.py	/^    def proc1(self, item):  return self.otoi[item]$/;"	m	class:CategoryProcessor
proc1	modules/exp/nb_12.py	/^    def proc1(self, item):  return [self.otoi[o] for o in item]$/;"	m	class:NumericalizeProcessor
proc1	modules/exp/nb_12.py	/^    def proc1(self, item): return self.proc_chunk([toks])[0]$/;"	m	class:TokenizeProcessor
proc_chunk	modules/exp/nb_12.py	/^    def proc_chunk(self, args):$/;"	m	class:TokenizeProcessor
process	modules/exp/nb_08.py	/^    def process(self, il, proc): return il.new(compose(il.items, proc))$/;"	m	class:LabeledData
process	modules/exp/nb_08.py	/^    def process(self, items): return items$/;"	m	class:Processor
process_sz	modules/exp/nb_10.py	/^def process_sz(sz):$/;"	f
progress_bar	modules/exp/nb_09c.py	/^from fastprogress import master_bar, progress_bar$/;"	i
randint	modules/exp/nb_10.py	/^from random import randint$/;"	i
random	modules/exp/nb_10.py	/^import random$/;"	i
random_splitter	modules/exp/nb_11a.py	/^def random_splitter(fn, p_valid): return random.random() < p_valid$/;"	f
re	modules/exp/nb_04.py	/^import re$/;"	i
re	modules/exp/notebook2script.py	/^import json,fire,re$/;"	i
re_labeler	modules/cnn-lstm.py	/^def re_labeler(fn, pat, subcl='act'):$/;"	f
re_labeler	modules/hapkim-custom.py	/^def re_labeler(fn, pat, subcl='act'):$/;"	f
re_labeler	modules/ser-code-convert-submissionverison .py	/^def re_labeler(fn, pat, subcl='act'):$/;"	f
re_labeler	modules/ser-code-interpret.py	/^def re_labeler(fn, pat, subcl='act'):$/;"	f
read_file	modules/exp/nb_12.py	/^def read_file(fn):$/;"	f
reduce_loss	modules/exp/nb_10b.py	/^def reduce_loss(loss, reduction='mean'):$/;"	f
remove	modules/exp/nb_06.py	/^    def remove(self): self.hook.remove()$/;"	m	class:Hook
remove	modules/exp/nb_06.py	/^    def remove(self):$/;"	m	class:Hooks
remove_cbs	modules/exp/nb_09b.py	/^    def remove_cbs(self, cbs):$/;"	m	class:Learner
replace_all_caps	modules/exp/nb_12.py	/^def replace_all_caps(x):$/;"	f
replace_rep	modules/exp/nb_12.py	/^def replace_rep(t):$/;"	f
replace_wrep	modules/exp/nb_12.py	/^def replace_wrep(t):$/;"	f
res	modules/cnn-lstm.py	/^res = get_predictions(learn, testset.unsqueeze(1))$/;"	v
res	modules/exp/nb_translation.py	/^res = tst_encoding(torch.arange(0,100).float())$/;"	v
res	modules/hapkim-custom.py	/^res = get_predictions(learn, testset.unsqueeze(1))$/;"	v
res	modules/ser-code-convert-submissionverison .py	/^res = get_predictions(learn, testset.unsqueeze(1))$/;"	v
res	modules/ser-code-interpret.py	/^res = get_predictions(learn, testset.unsqueeze(1))$/;"	v
res_x	modules/exp/nb_translation.py	/^    res_x = torch.zeros(len(samples), max_len_x).long() + pad_idx$/;"	v
res_y	modules/exp/nb_translation.py	/^    res_y = torch.zeros(len(samples), max_len_y).long() + pad_idx$/;"	v
reset	modules/exp/nb_04.py	/^    def reset(self):$/;"	m	class:AvgStats
reset	modules/exp/nb_12a.py	/^    def reset(self):$/;"	m	class:AWD_LSTM
reset	modules/exp/nb_12a.py	/^    def reset(self):$/;"	m	class:SequentialRNN
rm_useless_spaces	modules/exp/nb_12.py	/^def rm_useless_spaces(t):$/;"	f
root_path	modules/hapkim-custom.py	/^root_path = Path('\/gdrive\/Shareddrives\/Dion-Account\/2122WS\/8-dl4slp\/coding-project\/ser'); root_path.ls()$/;"	v
root_path	modules/ser-code-convert-submissionverison .py	/^root_path = Path('\/gdrive\/Shareddrives\/Dion-Account\/2122WS\/8-dl4slp\/coding-project\/ser'); root_path.ls()$/;"	v
root_path	modules/ser-code-interpret.py	/^root_path = Path('\/gdrive\/Shareddrives\/Dion-Account\/2122WS\/8-dl4slp\/coding-project\/ser'); root_path.ls()$/;"	v
run_notebook	modules/run_notebook.py	/^def run_notebook(path):$/;"	f
samples	modules/exp/nb_translation.py	/^    samples = to_data(samples)$/;"	v
save_checkpoint	modules/ser-code-interpret.py	/^def save_checkpoint(learner, filename):$/;"	f
sched_1cycle	modules/exp/nb_11a.py	/^def sched_1cycle(lrs, pct_start=0.3, mom_start=0.95, mom_mid=0.85, mom_end=0.95):$/;"	f
sched_cos	modules/exp/nb_05.py	/^def sched_cos(start, end, pos): return start + (1 + math.cos(math.pi*(1-pos))) * (end-start) \/ 2$/;"	f
sched_exp	modules/exp/nb_05.py	/^def sched_exp(start, end, pos): return start * (end\/start) ** pos$/;"	f
sched_lin	modules/exp/nb_05.py	/^def sched_lin(start, end, pos): return start + pos*(end-start)$/;"	f
sched_lr	modules/exp/train_imagenette.py	/^sched_lr  = combine_scheds(pcts, cos_1cycle_anneal(lr\/10., lr, lr\/1e5))$/;"	v
sched_mom	modules/exp/train_imagenette.py	/^sched_mom = combine_scheds(pcts, cos_1cycle_anneal(0.95, 0.85, 0.95))$/;"	v
sched_no	modules/exp/nb_05.py	/^def sched_no(start, end, pos):  return start$/;"	f
sd	modules/cnn-lstm.py	/^sd = SplitData.split_by_func(al, partial(random_splitter, p_valid=0.2))$/;"	v
sd	modules/exp/train_imagenette.py	/^sd = SplitData.split_by_func(il, partial(grandparent_splitter, valid_name='val'))$/;"	v
sd	modules/hapkim-custom.py	/^sd = SplitData.split_by_func(al, partial(random_splitter, p_valid=0.2))$/;"	v
sd	modules/ser-code-convert-submissionverison .py	/^sd = SplitData.split_by_func(al, partial(random_splitter, p_valid=0.2))$/;"	v
sd	modules/ser-code-interpret.py	/^sd = SplitData.split_by_func(al, partial(random_splitter, p_valid=0.2))$/;"	v
ser_path	modules/hapkim-custom.py	/^ser_path = Path('\/gdrive\/Shareddrives\/Dion-Account\/2122WS\/8-dl4slp\/coding-project\/ser\/')$/;"	v
set_param	modules/exp/nb_05.py	/^    def set_param(self):$/;"	m	class:ParamScheduler
set_param	modules/exp/nb_05b.py	/^    def set_param(self):$/;"	m	class:ParamScheduler
set_pb	modules/exp/nb_09c.py	/^    def set_pb(self):$/;"	m	class:ProgressCallback
set_runner	modules/exp/nb_04.py	/^    def set_runner(self, run): self.run=run$/;"	m	class:Callback
set_runner	modules/exp/nb_05b.py	/^    def set_runner(self, run): self.run=run$/;"	m	class:Callback
set_trace	modules/exp/nb_01.py	/^from IPython.core.debugger import set_trace$/;"	i
setify	modules/exp/nb_08.py	/^def setify(o): return o if isinstance(o,set) else set(listify(o))$/;"	f
sgd_opt	modules/exp/nb_09.py	/^sgd_opt = partial(Optimizer, steppers=[weight_decay, sgd_step])$/;"	v
sgd_step	modules/exp/nb_09.py	/^def sgd_step(p, lr, **kwargs):$/;"	f
show_batch	modules/exp/nb_10.py	/^def show_batch(x, c=4, r=None, figsize=None):$/;"	f
show_image	modules/exp/nb_08.py	/^def show_image(im, figsize=(3,3)):$/;"	f
show_image	modules/exp/nb_10.py	/^def show_image(im, ax=None, figsize=(3,3)):$/;"	f
size	modules/exp/train_imagenette.py	/^size = 128$/;"	v
sn	modules/cnn-lstm.py	/^import seaborn as sn$/;"	i
sn	modules/ser-code-interpret.py	/^import seaborn as sn$/;"	i
spacy	modules/exp/nb_12.py	/^import spacy,html$/;"	i
spec_add_spaces	modules/exp/nb_12.py	/^def spec_add_spaces(t):$/;"	f
split_by_func	modules/exp/nb_08.py	/^    def split_by_func(cls, il, f):$/;"	m	class:SplitData
split_by_func	modules/exp/nb_08.py	/^def split_by_func(items, f):$/;"	f
st	modules/cnn-lstm.py	/^st = torch.load(root_path\/'checkpoints\/xtesnet50-5epochs.pt')$/;"	v
st	modules/ser-code-convert-submissionverison .py	/^st = torch.load(root_path\/'checkpoints\/xtesnet50-5epochs.pt')$/;"	v
st	modules/ser-code-interpret.py	/^st = torch.load(root_path\/'checkpoints\/xtesnet50-5epochs.pt')$/;"	v
step	modules/exp/nb_09.py	/^    def step(self):$/;"	m	class:Optimizer
step	modules/exp/nb_09.py	/^    def step(self):$/;"	m	class:StatefulOptimizer
sub_br	modules/exp/nb_12.py	/^def sub_br(t):$/;"	f
subm	modules/hapkim-custom.py	/^subm = defaultdict(str)$/;"	v
submission	modules/cnn-lstm.py	/^submission = list(map(lambda o: label_convert[int(o)], res))$/;"	v
submission	modules/ser-code-convert-submissionverison .py	/^submission = list(map(lambda o: label_convert[int(o)], res))$/;"	v
submission	modules/ser-code-interpret.py	/^submission = list(map(lambda o: label_convert[int(o)], res))$/;"	v
t1	modules/hapkim-custom.py	/^t1= features[0].unsqueeze(1); t.shape$/;"	v
tensor	modules/exp/nb_01.py	/^from torch import tensor$/;"	i
test	modules/exp/nb_01.py	/^def test(a,b,cmp,cname=None):$/;"	f
test_eq	modules/exp/nb_01.py	/^def test_eq(a,b): test(a,b,operator.eq,'==')$/;"	f
test_items	modules/cnn-lstm.py	/^test_items = AudioList.from_files(dev_path, tfms=tfms)$/;"	v
test_items	modules/ser-code-convert-submissionverison .py	/^test_items = AudioList.from_files(dev_path, tfms=tfms)$/;"	v
test_items	modules/ser-code-interpret.py	/^test_items = AudioList.from_files(dev_path, tfms=tfms)$/;"	v
test_near	modules/exp/nb_01.py	/^def test_near(a,b): test(a,b,near)/;"	f
test_near_zero	modules/exp/nb_02.py	/^def test_near_zero(a,tol=1e-3): assert a.abs()<tol, f"Near zero: {a}"$/;"	f
test_overflow	modules/exp/nb_10c.py	/^def test_overflow(x):$/;"	f
testset	modules/cnn-lstm.py	/^testset=torch.cat([al[idx] for idx, _ in enumerate(test_items.items)], dim=0)$/;"	v
testset	modules/hapkim-custom.py	/^testset=torch.cat([al[idx] for idx, _ in enumerate(al.items)], dim=0)$/;"	v
testset	modules/ser-code-convert-submissionverison .py	/^testset=torch.cat([al[idx] for idx, _ in enumerate(test_items.items)], dim=0)$/;"	v
testset	modules/ser-code-interpret.py	/^testset=torch.cat([al[idx] for idx, _ in enumerate(test_items.items)], dim=0)$/;"	v
tfm_upload	modules/cnn-lstm.py	/^def tfm_upload(fpath, result):$/;"	f
tfm_upload	modules/ser-code-convert-submissionverison .py	/^def tfm_upload(fpath, result):$/;"	f
tfm_upload	modules/ser-code-interpret.py	/^def tfm_upload(fpath, result):$/;"	f
tfms	modules/cnn-lstm.py	/^tfms = [Reshape(), PadorTrim(250), DummyChannel(), masker]$/;"	v
tfms	modules/exp/train_imagenette.py	/^tfms = [make_rgb, RandomResizedCrop(128,scale=(0.35,1)), np_to_float, PilRandomFlip()]$/;"	v
tfms	modules/hapkim-custom.py	/^tfms = [Reshape(), PadorTrim(250), DummyChannel(), masker]$/;"	v
tfms	modules/ser-code-convert-submissionverison .py	/^tfms = [Reshape(), PadorTrim(250), DummyChannel(), masker]$/;"	v
tfms	modules/ser-code-interpret.py	/^tfms = [Reshape(), PadorTrim(250), DummyChannel(), masker]$/;"	v
time	modules/exp/nb_09c.py	/^import time$/;"	i
to_byte_tensor	modules/exp/nb_08.py	/^def to_byte_tensor(item):$/;"	f
to_detach	modules/exp/nb_12a.py	/^def to_detach(h):$/;"	f
to_float_tensor	modules/exp/nb_08.py	/^def to_float_tensor(item): return item.float().div_(255.)$/;"	f
to_master_grads	modules/exp/nb_10c.py	/^def to_master_grads(model_pgs, master_pgs, flat_master:bool=False)->None:$/;"	f
to_model_params	modules/exp/nb_10c.py	/^def to_model_params(model_pgs, master_pgs, flat_master:bool=False)->None:$/;"	f
torch	modules/exp/nb_01.py	/^import pickle, gzip, math, torch, matplotlib as mpl$/;"	i
torch	modules/exp/nb_03.py	/^import torch.nn.functional as F$/;"	i
train_ds	modules/exp/nb_04.py	/^    def train_ds(self): return self.train_dl.dataset$/;"	m	class:DataBunch
train_ds	modules/exp/nb_08.py	/^    def train_ds(self): return self.train_dl.dataset$/;"	m	class:DataBunch
train_path	modules/ser-code-convert-submissionverison .py	/^train_path = (root_path\/'data\/v1\/train')$/;"	v
train_path	modules/ser-code-interpret.py	/^train_path = (root_path\/'data\/v1\/train')$/;"	v
trg_path	modules/cnn-lstm.py	/^trg_path = root_path\/'uploads\/xtesnet50-5epochs.json'$/;"	v
trg_path	modules/ser-code-convert-submissionverison .py	/^trg_path = root_path\/'uploads\/xtesnet50-5epochs.json'$/;"	v
trg_path	modules/ser-code-interpret.py	/^trg_path = root_path\/'uploads\/xtesnet50-5epochs.json'$/;"	v
uniform	modules/exp/nb_10.py	/^def uniform(a,b): return a + (b-a) * random.random()$/;"	f
uniqueify	modules/exp/nb_08.py	/^def uniqueify(x, sort=False):$/;"	f
unsqueeze	modules/exp/nb_10b.py	/^def unsqueeze(input, dims):$/;"	f
update	modules/exp/nb_09.py	/^    def update(self, p, state, **kwargs): raise NotImplementedError$/;"	m	class:Stat
update	modules/exp/nb_09.py	/^    def update(self, p, state, **kwargs):$/;"	m	class:StepCount
update	modules/exp/nb_09.py	/^    def update(self, p, state, mom, **kwargs):$/;"	m	class:AverageGrad
update	modules/exp/nb_09.py	/^    def update(self, p, state, sqr_mom, **kwargs):$/;"	m	class:AverageSqrGrad
update_stats	modules/exp/nb_07.py	/^    def update_stats(self, x):$/;"	m	class:RunningBatchNorm
url	modules/exp/train_imagenette.py	/^url = URLs.IMAGENETTE_160 if size<140 else URLs.IMAGENETTE_320 if size<240 else URLs.IMAGENETTE$/;"	v
valid_ds	modules/exp/nb_04.py	/^    def valid_ds(self): return self.valid_dl.dataset$/;"	m	class:DataBunch
valid_ds	modules/exp/nb_08.py	/^    def valid_ds(self): return self.valid_dl.dataset$/;"	m	class:DataBunch
view_tfm	modules/exp/nb_06.py	/^def view_tfm(*size):$/;"	f
warnings	modules/exp/nb_12a.py	/^import warnings$/;"	i
warp	modules/exp/nb_10.py	/^def warp(img, size, src_coords, resample=PIL.Image.BILINEAR):$/;"	f
weight_decay	modules/exp/nb_09.py	/^def weight_decay(p, lr, wd, **kwargs):$/;"	f
x_obj	modules/exp/nb_08.py	/^    def x_obj(self, idx): return self.obj(self.x, idx, self.proc_x)$/;"	m	class:LabeledData
xresnet101	modules/exp/nb_11.py	/^def xresnet101(**kwargs): return XResNet.create(4, [3, 4, 23, 3], **kwargs)$/;"	f
xresnet152	modules/exp/nb_11.py	/^def xresnet152(**kwargs): return XResNet.create(4, [3, 8, 36, 3], **kwargs)$/;"	f
xresnet18	modules/exp/nb_11.py	/^def xresnet18 (**kwargs): return XResNet.create(1, [2, 2, 2, 2], **kwargs)$/;"	f
xresnet34	modules/exp/nb_11.py	/^def xresnet34 (**kwargs): return XResNet.create(1, [3, 4, 6, 3], **kwargs)$/;"	f
xresnet50	modules/exp/nb_11.py	/^def xresnet50 (**kwargs): return XResNet.create(4, [3, 4, 6, 3], **kwargs)$/;"	f
xtra_cb	modules/exp/train_imagenette.py	/^xtra_cb = []$/;"	v
y	modules/exp/nb_translation.py	/^    y = F.pad(y, (1, 0), value=1)$/;"	v
y2	modules/exp/nb_translation.py	/^y2 = learn.model(inp2, out2)$/;"	v
y_obj	modules/exp/nb_08.py	/^    def y_obj(self, idx): return self.obj(self.y, idx, self.proc_y)$/;"	m	class:LabeledData
zero_grad	modules/exp/nb_09.py	/^    def zero_grad(self):$/;"	m	class:Optimizer
